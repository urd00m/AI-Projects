node {
  name: "global_step/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "global_step"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "global_step"
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "global_step/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "global_step/Assign"
  op: "AssignVariableOp"
  input: "global_step"
  input: "global_step/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "global_step/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "global_step/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "global_step/cond"
  op: "If"
  input: "global_step/VarIsInitializedOp"
  input: "global_step"
  input: "global_step/Initializer/zeros"
  attr {
    key: "Tcond"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tin"
    value {
      list {
        type: DT_RESOURCE
        type: DT_INT64
      }
    }
  }
  attr {
    key: "Tout"
    value {
      list {
        type: DT_INT64
      }
    }
  }
  attr {
    key: "_lower_using_switch_merge"
    value {
      b: true
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "_read_only_resource_inputs"
    value {
      list {
        i: 1
      }
    }
  }
  attr {
    key: "else_branch"
    value {
      func {
        name: "global_step_cond_false_7"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "then_branch"
    value {
      func {
        name: "global_step_cond_true_6"
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "global_step/cond/Identity"
  op: "Identity"
  input: "global_step/cond"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "global_step/add/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "global_step/add"
  op: "AddV2"
  input: "global_step/cond/Identity"
  input: "global_step/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "normalize_element/component_0"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "./tfds/mnist/3.0.1/mnist-train.tfrecord-00000-of-00001"
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "normalize_element/component_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "mnist-train.tfrecord-00000-of-00001"
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "normalize_element/component_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 1
          }
        }
        int64_val: 0
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "normalize_element/component_3"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 1
          }
        }
        int64_val: -1
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "TensorSliceDataset"
  op: "TensorSliceDataset"
  input: "normalize_element/component_0"
  input: "normalize_element/component_1"
  input: "normalize_element/component_2"
  input: "normalize_element/component_3"
  device: "/device:CPU:0"
  attr {
    key: "Toutput_types"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_INT64
        type: DT_INT64
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "cycle_length"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 16
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "block_length"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 16
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "buffer_output_elements"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "prefetch_input_elements"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "num_parallel_calls"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "ParallelInterleaveDatasetV3"
  op: "ParallelInterleaveDatasetV3"
  input: "TensorSliceDataset"
  input: "cycle_length"
  input: "block_length"
  input: "num_parallel_calls"
  device: "/device:CPU:0"
  attr {
    key: "Targuments"
    value {
      list {
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "deterministic"
    value {
      s: "default"
    }
  }
  attr {
    key: "f"
    value {
      func {
        name: "__inference_Dataset_interleave_classfunctools.partial_42"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "expected_cardinality"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 60000
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "AssertCardinalityDataset"
  op: "AssertCardinalityDataset"
  input: "ParallelInterleaveDatasetV3"
  input: "expected_cardinality"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "num_parallel_calls_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "ParallelMapDataset"
  op: "ParallelMapDataset"
  input: "AssertCardinalityDataset"
  input: "num_parallel_calls_1"
  device: "/device:CPU:0"
  attr {
    key: "Targuments"
    value {
      list {
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "f"
    value {
      func {
        name: "__inference_Dataset_map_parse_and_decode_150"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
          dim {
            size: 28
          }
          dim {
            size: 1
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_UINT8
        type: DT_INT64
      }
    }
  }
  attr {
    key: "preserve_cardinality"
    value {
      b: true
    }
  }
  attr {
    key: "sloppy"
    value {
      b: false
    }
  }
  attr {
    key: "use_inter_op_parallelism"
    value {
      b: true
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "filename"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "CacheDataset"
  op: "CacheDataset"
  input: "ParallelMapDataset"
  input: "filename"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
          dim {
            size: 28
          }
          dim {
            size: 1
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_UINT8
        type: DT_INT64
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "buffer_size"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "PrefetchDataset"
  op: "PrefetchDataset"
  input: "CacheDataset"
  input: "buffer_size"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "legacy_autotune"
    value {
      b: true
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
          dim {
            size: 28
          }
          dim {
            size: 1
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_UINT8
        type: DT_INT64
      }
    }
  }
  attr {
    key: "slack_period"
    value {
      i: 0
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "normalize_element_1/component_0"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "./tfds/mnist/3.0.1/mnist-test.tfrecord-00000-of-00001"
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "normalize_element_1/component_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "mnist-test.tfrecord-00000-of-00001"
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "normalize_element_1/component_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 1
          }
        }
        int64_val: 0
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "normalize_element_1/component_3"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
          dim {
            size: 1
          }
        }
        int64_val: -1
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "TensorSliceDataset_1"
  op: "TensorSliceDataset"
  input: "normalize_element_1/component_0"
  input: "normalize_element_1/component_1"
  input: "normalize_element_1/component_2"
  input: "normalize_element_1/component_3"
  device: "/device:CPU:0"
  attr {
    key: "Toutput_types"
    value {
      list {
        type: DT_STRING
        type: DT_STRING
        type: DT_INT64
        type: DT_INT64
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
        shape {
        }
        shape {
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "cycle_length_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 16
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "block_length_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 16
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "buffer_output_elements_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "prefetch_input_elements_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "num_parallel_calls_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "ParallelInterleaveDatasetV3_1"
  op: "ParallelInterleaveDatasetV3"
  input: "TensorSliceDataset_1"
  input: "cycle_length_1"
  input: "block_length_1"
  input: "num_parallel_calls_2"
  device: "/device:CPU:0"
  attr {
    key: "Targuments"
    value {
      list {
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "deterministic"
    value {
      s: "default"
    }
  }
  attr {
    key: "f"
    value {
      func {
        name: "__inference_Dataset_interleave_classfunctools.partial_179"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "expected_cardinality_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 10000
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "AssertCardinalityDataset_1"
  op: "AssertCardinalityDataset"
  input: "ParallelInterleaveDatasetV3_1"
  input: "expected_cardinality_1"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_STRING
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "num_parallel_calls_3"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "ParallelMapDataset_1"
  op: "ParallelMapDataset"
  input: "AssertCardinalityDataset_1"
  input: "num_parallel_calls_3"
  device: "/device:CPU:0"
  attr {
    key: "Targuments"
    value {
      list {
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "f"
    value {
      func {
        name: "__inference_Dataset_map_parse_and_decode_287"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
          dim {
            size: 28
          }
          dim {
            size: 1
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_UINT8
        type: DT_INT64
      }
    }
  }
  attr {
    key: "preserve_cardinality"
    value {
      b: true
    }
  }
  attr {
    key: "sloppy"
    value {
      b: false
    }
  }
  attr {
    key: "use_inter_op_parallelism"
    value {
      b: true
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "filename_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ""
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "CacheDataset_1"
  op: "CacheDataset"
  input: "ParallelMapDataset_1"
  input: "filename_1"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
          dim {
            size: 28
          }
          dim {
            size: 1
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_UINT8
        type: DT_INT64
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "buffer_size_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "PrefetchDataset_1"
  op: "PrefetchDataset"
  input: "CacheDataset_1"
  input: "buffer_size_1"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "legacy_autotune"
    value {
      b: true
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
          dim {
            size: 28
          }
          dim {
            size: 1
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_UINT8
        type: DT_INT64
      }
    }
  }
  attr {
    key: "slack_period"
    value {
      i: 0
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "buffer_size_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 60000
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "seed"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "seed2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "ShuffleDataset"
  op: "ShuffleDataset"
  input: "PrefetchDataset"
  input: "buffer_size_2"
  input: "seed"
  input: "seed2"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
          dim {
            size: 28
          }
          dim {
            size: 1
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_UINT8
        type: DT_INT64
      }
    }
  }
  attr {
    key: "reshuffle_each_iteration"
    value {
      b: true
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "count"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "RepeatDataset"
  op: "RepeatDataset"
  input: "ShuffleDataset"
  input: "count"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
          dim {
            size: 28
          }
          dim {
            size: 1
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_UINT8
        type: DT_INT64
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "batch_size"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 256
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "drop_remainder"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_BOOL
        tensor_shape {
        }
        bool_val: true
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "BatchDatasetV2"
  op: "BatchDatasetV2"
  input: "RepeatDataset"
  input: "batch_size"
  input: "drop_remainder"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 28
          }
          dim {
            size: 28
          }
          dim {
            size: 1
          }
        }
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_UINT8
        type: DT_INT64
      }
    }
  }
  attr {
    key: "parallel_copy"
    value {
      b: false
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "num_parallel_calls_4"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "ParallelMapDataset_2"
  op: "ParallelMapDataset"
  input: "BatchDatasetV2"
  input: "num_parallel_calls_4"
  device: "/device:CPU:0"
  attr {
    key: "Targuments"
    value {
      list {
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "f"
    value {
      func {
        name: "__inference_Dataset_map__parse_batch_samples_314"
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 784
          }
        }
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_HALF
        type: DT_INT32
      }
    }
  }
  attr {
    key: "preserve_cardinality"
    value {
      b: true
    }
  }
  attr {
    key: "sloppy"
    value {
      b: false
    }
  }
  attr {
    key: "use_inter_op_parallelism"
    value {
      b: true
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "buffer_size_3"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: -1
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "PrefetchDataset_2"
  op: "PrefetchDataset"
  input: "ParallelMapDataset_2"
  input: "buffer_size_3"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "legacy_autotune"
    value {
      b: true
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 784
          }
        }
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_HALF
        type: DT_INT32
      }
    }
  }
  attr {
    key: "slack_period"
    value {
      i: 0
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "optimizations"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 3
          }
        }
        string_val: "map_and_batch_fusion"
        string_val: "noop_elimination"
        string_val: "shuffle_and_repeat_fusion"
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "OptimizeDataset"
  op: "OptimizeDataset"
  input: "PrefetchDataset_2"
  input: "optimizations"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "optimization_configs"
    value {
      list {
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 784
          }
        }
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_HALF
        type: DT_INT32
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "ModelDataset"
  op: "ModelDataset"
  input: "OptimizeDataset"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "algorithm"
    value {
      i: 0
    }
  }
  attr {
    key: "cpu_budget"
    value {
      i: 0
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 784
          }
        }
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_HALF
        type: DT_INT32
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "IteratorV2"
  op: "IteratorV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 784
          }
        }
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_HALF
        type: DT_INT32
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "MakeIterator"
  op: "MakeIterator"
  input: "ModelDataset"
  input: "IteratorV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@IteratorV2"
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "IteratorToStringHandle"
  op: "IteratorToStringHandle"
  input: "IteratorV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "IteratorGetNext"
  op: "IteratorGetNext"
  input: "IteratorV2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 784
          }
        }
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 784
          }
        }
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  attr {
    key: "output_types"
    value {
      list {
        type: DT_HALF
        type: DT_INT32
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_1/dense/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_1/dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\020\003\000\000\364\001\000\000"
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_1/dense/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_1/dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.06835859268903732
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_1/dense/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_1/dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.06835859268903732
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_1/dense/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "km_disable_scope_1/dense/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_1/dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 784
          }
          dim {
            size: 500
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_1/dense/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "km_disable_scope_1/dense/kernel/Initializer/random_uniform/max"
  input: "km_disable_scope_1/dense/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_1/dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_1/dense/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "km_disable_scope_1/dense/kernel/Initializer/random_uniform/RandomUniform"
  input: "km_disable_scope_1/dense/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_1/dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 784
          }
          dim {
            size: 500
          }
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_1/dense/kernel/Initializer/random_uniform"
  op: "Add"
  input: "km_disable_scope_1/dense/kernel/Initializer/random_uniform/mul"
  input: "km_disable_scope_1/dense/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_1/dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 784
          }
          dim {
            size: 500
          }
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_1/dense/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_1/dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 784
        }
        dim {
          size: 500
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "km_disable_scope_1/dense/kernel"
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_1/dense/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "km_disable_scope_1/dense/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_1/dense/kernel/Assign"
  op: "AssignVariableOp"
  input: "km_disable_scope_1/dense/kernel"
  input: "km_disable_scope_1/dense/kernel/Initializer/random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_1/dense/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "km_disable_scope_1/dense/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 784
          }
          dim {
            size: 500
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_1/dense/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_1/dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 500
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 500
          }
        }
        float_val: 0.0
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_1/dense/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_1/dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 500
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "km_disable_scope_1/dense/bias"
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_1/dense/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "km_disable_scope_1/dense/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_1/dense/bias/Assign"
  op: "AssignVariableOp"
  input: "km_disable_scope_1/dense/bias"
  input: "km_disable_scope_1/dense/bias/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_1/dense/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "km_disable_scope_1/dense/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 500
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_1/dense/MatMul/ReadVariableOp"
  op: "ReadVariableOp"
  input: "km_disable_scope_1/dense/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 784
          }
          dim {
            size: 500
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_1/dense/MatMul/Cast"
  op: "Cast"
  input: "km_disable_scope_1/dense/MatMul/ReadVariableOp"
  attr {
    key: "DstT"
    value {
      type: DT_HALF
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 784
          }
          dim {
            size: 500
          }
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_1/dense/MatMul"
  op: "MatMul"
  input: "IteratorGetNext"
  input: "km_disable_scope_1/dense/MatMul/Cast"
  attr {
    key: "T"
    value {
      type: DT_HALF
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 500
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_1/dense/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "km_disable_scope_1/dense/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 500
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_1/dense/BiasAdd/Cast"
  op: "Cast"
  input: "km_disable_scope_1/dense/BiasAdd/ReadVariableOp"
  attr {
    key: "DstT"
    value {
      type: DT_HALF
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 500
          }
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_1/dense/BiasAdd"
  op: "BiasAdd"
  input: "km_disable_scope_1/dense/MatMul"
  input: "km_disable_scope_1/dense/BiasAdd/Cast"
  attr {
    key: "T"
    value {
      type: DT_HALF
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 500
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "activation/Relu"
  op: "Relu"
  input: "km_disable_scope_1/dense/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_HALF
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 500
          }
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "dropout/dropout/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_HALF
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_HALF
        tensor_shape {
        }
        half_val: 15616
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "dropout/dropout/Mul"
  op: "Mul"
  input: "activation/Relu"
  input: "dropout/dropout/Const"
  attr {
    key: "T"
    value {
      type: DT_HALF
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 500
          }
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "dropout/dropout/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\001\000\000\364\001\000\000"
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "dropout/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dropout/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 500
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_HALF
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "dropout/dropout/GreaterEqual/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_HALF
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_HALF
        tensor_shape {
        }
        half_val: 12902
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "dropout/dropout/GreaterEqual"
  op: "GreaterEqual"
  input: "dropout/dropout/random_uniform/RandomUniform"
  input: "dropout/dropout/GreaterEqual/y"
  attr {
    key: "T"
    value {
      type: DT_HALF
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 500
          }
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "dropout/dropout/Cast"
  op: "Cast"
  input: "dropout/dropout/GreaterEqual"
  attr {
    key: "DstT"
    value {
      type: DT_HALF
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 500
          }
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "dropout/dropout/Mul_1"
  op: "Mul"
  input: "dropout/dropout/Mul"
  input: "dropout/dropout/Cast"
  attr {
    key: "T"
    value {
      type: DT_HALF
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 500
          }
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_3/dense_1/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_3/dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\364\001\000\000,\001\000\000"
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_3/dense_1/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_3/dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.08660253882408142
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_3/dense_1/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_3/dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.08660253882408142
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_3/dense_1/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "km_disable_scope_3/dense_1/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_3/dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 500
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_3/dense_1/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "km_disable_scope_3/dense_1/kernel/Initializer/random_uniform/max"
  input: "km_disable_scope_3/dense_1/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_3/dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_3/dense_1/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "km_disable_scope_3/dense_1/kernel/Initializer/random_uniform/RandomUniform"
  input: "km_disable_scope_3/dense_1/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_3/dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 500
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_3/dense_1/kernel/Initializer/random_uniform"
  op: "Add"
  input: "km_disable_scope_3/dense_1/kernel/Initializer/random_uniform/mul"
  input: "km_disable_scope_3/dense_1/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_3/dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 500
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_3/dense_1/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_3/dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 500
        }
        dim {
          size: 300
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "km_disable_scope_3/dense_1/kernel"
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_3/dense_1/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "km_disable_scope_3/dense_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_3/dense_1/kernel/Assign"
  op: "AssignVariableOp"
  input: "km_disable_scope_3/dense_1/kernel"
  input: "km_disable_scope_3/dense_1/kernel/Initializer/random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_3/dense_1/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "km_disable_scope_3/dense_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 500
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_3/dense_1/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_3/dense_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 300
          }
        }
        float_val: 0.0
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_3/dense_1/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_3/dense_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 300
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "km_disable_scope_3/dense_1/bias"
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_3/dense_1/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "km_disable_scope_3/dense_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_3/dense_1/bias/Assign"
  op: "AssignVariableOp"
  input: "km_disable_scope_3/dense_1/bias"
  input: "km_disable_scope_3/dense_1/bias/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_3/dense_1/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "km_disable_scope_3/dense_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_3/dense_1/MatMul/ReadVariableOp"
  op: "ReadVariableOp"
  input: "km_disable_scope_3/dense_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 500
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_3/dense_1/MatMul/Cast"
  op: "Cast"
  input: "km_disable_scope_3/dense_1/MatMul/ReadVariableOp"
  attr {
    key: "DstT"
    value {
      type: DT_HALF
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 500
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_3/dense_1/MatMul"
  op: "MatMul"
  input: "dropout/dropout/Mul_1"
  input: "km_disable_scope_3/dense_1/MatMul/Cast"
  attr {
    key: "T"
    value {
      type: DT_HALF
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_3/dense_1/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "km_disable_scope_3/dense_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_3/dense_1/BiasAdd/Cast"
  op: "Cast"
  input: "km_disable_scope_3/dense_1/BiasAdd/ReadVariableOp"
  attr {
    key: "DstT"
    value {
      type: DT_HALF
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_3/dense_1/BiasAdd"
  op: "BiasAdd"
  input: "km_disable_scope_3/dense_1/MatMul"
  input: "km_disable_scope_3/dense_1/BiasAdd/Cast"
  attr {
    key: "T"
    value {
      type: DT_HALF
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "activation_1/Relu"
  op: "Relu"
  input: "km_disable_scope_3/dense_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_HALF
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "dropout_1/dropout/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_HALF
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_HALF
        tensor_shape {
        }
        half_val: 15616
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "dropout_1/dropout/Mul"
  op: "Mul"
  input: "activation_1/Relu"
  input: "dropout_1/dropout/Const"
  attr {
    key: "T"
    value {
      type: DT_HALF
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "dropout_1/dropout/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\001\000\000,\001\000\000"
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "dropout_1/dropout/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dropout_1/dropout/Shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_HALF
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "dropout_1/dropout/GreaterEqual/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_HALF
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_HALF
        tensor_shape {
        }
        half_val: 12902
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "dropout_1/dropout/GreaterEqual"
  op: "GreaterEqual"
  input: "dropout_1/dropout/random_uniform/RandomUniform"
  input: "dropout_1/dropout/GreaterEqual/y"
  attr {
    key: "T"
    value {
      type: DT_HALF
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "dropout_1/dropout/Cast"
  op: "Cast"
  input: "dropout_1/dropout/GreaterEqual"
  attr {
    key: "DstT"
    value {
      type: DT_HALF
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "dropout_1/dropout/Mul_1"
  op: "Mul"
  input: "dropout_1/dropout/Mul"
  input: "dropout_1/dropout/Cast"
  attr {
    key: "T"
    value {
      type: DT_HALF
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_4/dense_2/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_4/dense_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: ",\001\000\000\n\000\000\000"
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_4/dense_2/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_4/dense_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.1391216665506363
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_4/dense_2/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_4/dense_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.1391216665506363
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_4/dense_2/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "km_disable_scope_4/dense_2/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_4/dense_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_4/dense_2/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "km_disable_scope_4/dense_2/kernel/Initializer/random_uniform/max"
  input: "km_disable_scope_4/dense_2/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_4/dense_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_4/dense_2/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "km_disable_scope_4/dense_2/kernel/Initializer/random_uniform/RandomUniform"
  input: "km_disable_scope_4/dense_2/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_4/dense_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_4/dense_2/kernel/Initializer/random_uniform"
  op: "Add"
  input: "km_disable_scope_4/dense_2/kernel/Initializer/random_uniform/mul"
  input: "km_disable_scope_4/dense_2/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_4/dense_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_4/dense_2/kernel"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_4/dense_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 300
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "km_disable_scope_4/dense_2/kernel"
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_4/dense_2/kernel/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "km_disable_scope_4/dense_2/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_4/dense_2/kernel/Assign"
  op: "AssignVariableOp"
  input: "km_disable_scope_4/dense_2/kernel"
  input: "km_disable_scope_4/dense_2/kernel/Initializer/random_uniform"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_4/dense_2/kernel/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "km_disable_scope_4/dense_2/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_4/dense_2/bias/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_4/dense_2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_4/dense_2/bias"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_4/dense_2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "km_disable_scope_4/dense_2/bias"
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_4/dense_2/bias/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "km_disable_scope_4/dense_2/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_4/dense_2/bias/Assign"
  op: "AssignVariableOp"
  input: "km_disable_scope_4/dense_2/bias"
  input: "km_disable_scope_4/dense_2/bias/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_4/dense_2/bias/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "km_disable_scope_4/dense_2/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_4/dense_2/MatMul/ReadVariableOp"
  op: "ReadVariableOp"
  input: "km_disable_scope_4/dense_2/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_4/dense_2/MatMul/Cast"
  op: "Cast"
  input: "km_disable_scope_4/dense_2/MatMul/ReadVariableOp"
  attr {
    key: "DstT"
    value {
      type: DT_HALF
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_4/dense_2/MatMul"
  op: "MatMul"
  input: "dropout_1/dropout/Mul_1"
  input: "km_disable_scope_4/dense_2/MatMul/Cast"
  attr {
    key: "T"
    value {
      type: DT_HALF
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_4/dense_2/BiasAdd/ReadVariableOp"
  op: "ReadVariableOp"
  input: "km_disable_scope_4/dense_2/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_4/dense_2/BiasAdd/Cast"
  op: "Cast"
  input: "km_disable_scope_4/dense_2/BiasAdd/ReadVariableOp"
  attr {
    key: "DstT"
    value {
      type: DT_HALF
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_4/dense_2/BiasAdd"
  op: "BiasAdd"
  input: "km_disable_scope_4/dense_2/MatMul"
  input: "km_disable_scope_4/dense_2/BiasAdd/Cast"
  attr {
    key: "T"
    value {
      type: DT_HALF
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "SparseSoftmaxCrossEntropyWithLogits/Cast"
  op: "Cast"
  input: "km_disable_scope_4/dense_2/BiasAdd"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_HALF
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "SparseSoftmaxCrossEntropyWithLogits/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"
  op: "SparseSoftmaxCrossEntropyWithLogits"
  input: "SparseSoftmaxCrossEntropyWithLogits/Cast"
  input: "IteratorGetNext:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tlabels"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
        shape {
          dim {
            size: 256
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "SparseSoftmaxCrossEntropyWithLogits/Cast_1"
  op: "Cast"
  input: "SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits"
  attr {
    key: "DstT"
    value {
      type: DT_HALF
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "Mean"
  op: "Mean"
  input: "SparseSoftmaxCrossEntropyWithLogits/Cast_1"
  input: "Const"
  attr {
    key: "T"
    value {
      type: DT_HALF
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "loss/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "loss"
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "loss"
  op: "ScalarSummary"
  input: "loss/tags"
  input: "Mean"
  attr {
    key: "T"
    value {
      type: DT_HALF
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "gradients/Shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "gradients/grad_ys_0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_HALF
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_HALF
        tensor_shape {
        }
        half_val: 15360
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "gradients/Fill"
  op: "Fill"
  input: "gradients/Shape"
  input: "gradients/grad_ys_0"
  attr {
    key: "T"
    value {
      type: DT_HALF
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "gradients/Mean_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "gradients/Mean_grad/Reshape"
  op: "Reshape"
  input: "gradients/Fill"
  input: "gradients/Mean_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_HALF
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "gradients/Mean_grad/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "gradients/Mean_grad/Tile"
  op: "Tile"
  input: "gradients/Mean_grad/Reshape"
  input: "gradients/Mean_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_HALF
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "gradients/Mean_grad/Const_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_HALF
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_HALF
        tensor_shape {
        }
        half_val: 23552
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "gradients/Mean_grad/truediv"
  op: "RealDiv"
  input: "gradients/Mean_grad/Tile"
  input: "gradients/Mean_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_HALF
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "gradients/SparseSoftmaxCrossEntropyWithLogits/Cast_1_grad/Cast"
  op: "Cast"
  input: "gradients/Mean_grad/truediv"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_HALF
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "gradients/zeros_like"
  op: "ZerosLike"
  input: "SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "gradients/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/ExpandDims/dim"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "gradients/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/ExpandDims"
  op: "ExpandDims"
  input: "gradients/SparseSoftmaxCrossEntropyWithLogits/Cast_1_grad/Cast"
  input: "gradients/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "gradients/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/mul"
  op: "Mul"
  input: "gradients/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/ExpandDims"
  input: "SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "gradients/SparseSoftmaxCrossEntropyWithLogits/Cast_grad/Cast"
  op: "Cast"
  input: "gradients/SparseSoftmaxCrossEntropyWithLogits/SparseSoftmaxCrossEntropyWithLogits_grad/mul"
  attr {
    key: "DstT"
    value {
      type: DT_HALF
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "gradients/km_disable_scope_4/dense_2/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/SparseSoftmaxCrossEntropyWithLogits/Cast_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_HALF
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "gradients/km_disable_scope_4/dense_2/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/SparseSoftmaxCrossEntropyWithLogits/Cast_grad/Cast"
  input: "^gradients/km_disable_scope_4/dense_2/BiasAdd_grad/BiasAddGrad"
  experimental_debug_info {
  }
}
node {
  name: "gradients/km_disable_scope_4/dense_2/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/SparseSoftmaxCrossEntropyWithLogits/Cast_grad/Cast"
  input: "^gradients/km_disable_scope_4/dense_2/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_HALF
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/SparseSoftmaxCrossEntropyWithLogits/Cast_grad/Cast"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "gradients/km_disable_scope_4/dense_2/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/km_disable_scope_4/dense_2/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/km_disable_scope_4/dense_2/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_HALF
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/km_disable_scope_4/dense_2/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "gradients/km_disable_scope_4/dense_2/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/km_disable_scope_4/dense_2/BiasAdd_grad/tuple/control_dependency"
  input: "km_disable_scope_4/dense_2/MatMul/Cast"
  attr {
    key: "T"
    value {
      type: DT_HALF
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "gradients/km_disable_scope_4/dense_2/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dropout_1/dropout/Mul_1"
  input: "gradients/km_disable_scope_4/dense_2/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_HALF
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "gradients/km_disable_scope_4/dense_2/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/km_disable_scope_4/dense_2/MatMul_grad/MatMul"
  input: "^gradients/km_disable_scope_4/dense_2/MatMul_grad/MatMul_1"
  experimental_debug_info {
  }
}
node {
  name: "gradients/km_disable_scope_4/dense_2/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/km_disable_scope_4/dense_2/MatMul_grad/MatMul"
  input: "^gradients/km_disable_scope_4/dense_2/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_HALF
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/km_disable_scope_4/dense_2/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "gradients/km_disable_scope_4/dense_2/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/km_disable_scope_4/dense_2/MatMul_grad/MatMul_1"
  input: "^gradients/km_disable_scope_4/dense_2/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_HALF
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/km_disable_scope_4/dense_2/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "gradients/km_disable_scope_4/dense_2/BiasAdd/Cast_grad/Cast"
  op: "Cast"
  input: "gradients/km_disable_scope_4/dense_2/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_HALF
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "gradients/dropout_1/dropout/Mul_1_grad/BroadcastGradientArgs/s0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\001\000\000,\001\000\000"
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "gradients/dropout_1/dropout/Mul_1_grad/BroadcastGradientArgs/s1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\001\000\000,\001\000\000"
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "gradients/dropout_1/dropout/Mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/dropout_1/dropout/Mul_1_grad/BroadcastGradientArgs/s0"
  input: "gradients/dropout_1/dropout/Mul_1_grad/BroadcastGradientArgs/s1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "gradients/dropout_1/dropout/Mul_1_grad/Mul"
  op: "Mul"
  input: "gradients/km_disable_scope_4/dense_2/MatMul_grad/tuple/control_dependency"
  input: "dropout_1/dropout/Cast"
  attr {
    key: "T"
    value {
      type: DT_HALF
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "gradients/dropout_1/dropout/Mul_1_grad/Mul_1"
  op: "Mul"
  input: "dropout_1/dropout/Mul"
  input: "gradients/km_disable_scope_4/dense_2/MatMul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_HALF
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "gradients/dropout_1/dropout/Mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/dropout_1/dropout/Mul_1_grad/Mul"
  input: "^gradients/dropout_1/dropout/Mul_1_grad/Mul_1"
  experimental_debug_info {
  }
}
node {
  name: "gradients/dropout_1/dropout/Mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/dropout_1/dropout/Mul_1_grad/Mul"
  input: "^gradients/dropout_1/dropout/Mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_HALF
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/dropout_1/dropout/Mul_1_grad/Mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "gradients/dropout_1/dropout/Mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/dropout_1/dropout/Mul_1_grad/Mul_1"
  input: "^gradients/dropout_1/dropout/Mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_HALF
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/dropout_1/dropout/Mul_1_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "gradients/km_disable_scope_4/dense_2/MatMul/Cast_grad/Cast"
  op: "Cast"
  input: "gradients/km_disable_scope_4/dense_2/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_HALF
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "gradients/dropout_1/dropout/Mul_grad/BroadcastGradientArgs/s0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\001\000\000,\001\000\000"
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "gradients/dropout_1/dropout/Mul_grad/BroadcastGradientArgs/s1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "gradients/dropout_1/dropout/Mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/dropout_1/dropout/Mul_grad/BroadcastGradientArgs/s0"
  input: "gradients/dropout_1/dropout/Mul_grad/BroadcastGradientArgs/s1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "gradients/dropout_1/dropout/Mul_grad/Mul"
  op: "Mul"
  input: "gradients/dropout_1/dropout/Mul_1_grad/tuple/control_dependency"
  input: "dropout_1/dropout/Const"
  attr {
    key: "T"
    value {
      type: DT_HALF
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "gradients/dropout_1/dropout/Mul_grad/Mul_1"
  op: "Mul"
  input: "activation_1/Relu"
  input: "gradients/dropout_1/dropout/Mul_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_HALF
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "gradients/dropout_1/dropout/Mul_grad/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "gradients/dropout_1/dropout/Mul_grad/Sum"
  op: "Sum"
  input: "gradients/dropout_1/dropout/Mul_grad/Mul_1"
  input: "gradients/dropout_1/dropout/Mul_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_HALF
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "gradients/dropout_1/dropout/Mul_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "gradients/dropout_1/dropout/Mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/dropout_1/dropout/Mul_grad/Sum"
  input: "gradients/dropout_1/dropout/Mul_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_HALF
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "gradients/dropout_1/dropout/Mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/dropout_1/dropout/Mul_grad/Mul"
  input: "^gradients/dropout_1/dropout/Mul_grad/Reshape"
  experimental_debug_info {
  }
}
node {
  name: "gradients/dropout_1/dropout/Mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/dropout_1/dropout/Mul_grad/Mul"
  input: "^gradients/dropout_1/dropout/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_HALF
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/dropout_1/dropout/Mul_grad/Mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "gradients/dropout_1/dropout/Mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/dropout_1/dropout/Mul_grad/Reshape"
  input: "^gradients/dropout_1/dropout/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_HALF
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/dropout_1/dropout/Mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "gradients/activation_1/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/dropout_1/dropout/Mul_grad/tuple/control_dependency"
  input: "activation_1/Relu"
  attr {
    key: "T"
    value {
      type: DT_HALF
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "gradients/km_disable_scope_3/dense_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/activation_1/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_HALF
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "gradients/km_disable_scope_3/dense_1/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/activation_1/Relu_grad/ReluGrad"
  input: "^gradients/km_disable_scope_3/dense_1/BiasAdd_grad/BiasAddGrad"
  experimental_debug_info {
  }
}
node {
  name: "gradients/km_disable_scope_3/dense_1/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/activation_1/Relu_grad/ReluGrad"
  input: "^gradients/km_disable_scope_3/dense_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_HALF
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/activation_1/Relu_grad/ReluGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "gradients/km_disable_scope_3/dense_1/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/km_disable_scope_3/dense_1/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/km_disable_scope_3/dense_1/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_HALF
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/km_disable_scope_3/dense_1/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "gradients/km_disable_scope_3/dense_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/km_disable_scope_3/dense_1/BiasAdd_grad/tuple/control_dependency"
  input: "km_disable_scope_3/dense_1/MatMul/Cast"
  attr {
    key: "T"
    value {
      type: DT_HALF
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 500
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "gradients/km_disable_scope_3/dense_1/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "dropout/dropout/Mul_1"
  input: "gradients/km_disable_scope_3/dense_1/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_HALF
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 500
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "gradients/km_disable_scope_3/dense_1/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/km_disable_scope_3/dense_1/MatMul_grad/MatMul"
  input: "^gradients/km_disable_scope_3/dense_1/MatMul_grad/MatMul_1"
  experimental_debug_info {
  }
}
node {
  name: "gradients/km_disable_scope_3/dense_1/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/km_disable_scope_3/dense_1/MatMul_grad/MatMul"
  input: "^gradients/km_disable_scope_3/dense_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_HALF
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/km_disable_scope_3/dense_1/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 500
          }
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "gradients/km_disable_scope_3/dense_1/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/km_disable_scope_3/dense_1/MatMul_grad/MatMul_1"
  input: "^gradients/km_disable_scope_3/dense_1/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_HALF
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/km_disable_scope_3/dense_1/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 500
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "gradients/km_disable_scope_3/dense_1/BiasAdd/Cast_grad/Cast"
  op: "Cast"
  input: "gradients/km_disable_scope_3/dense_1/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_HALF
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "gradients/dropout/dropout/Mul_1_grad/BroadcastGradientArgs/s0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\001\000\000\364\001\000\000"
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "gradients/dropout/dropout/Mul_1_grad/BroadcastGradientArgs/s1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\001\000\000\364\001\000\000"
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "gradients/dropout/dropout/Mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/dropout/dropout/Mul_1_grad/BroadcastGradientArgs/s0"
  input: "gradients/dropout/dropout/Mul_1_grad/BroadcastGradientArgs/s1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "gradients/dropout/dropout/Mul_1_grad/Mul"
  op: "Mul"
  input: "gradients/km_disable_scope_3/dense_1/MatMul_grad/tuple/control_dependency"
  input: "dropout/dropout/Cast"
  attr {
    key: "T"
    value {
      type: DT_HALF
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 500
          }
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "gradients/dropout/dropout/Mul_1_grad/Mul_1"
  op: "Mul"
  input: "dropout/dropout/Mul"
  input: "gradients/km_disable_scope_3/dense_1/MatMul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_HALF
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 500
          }
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "gradients/dropout/dropout/Mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/dropout/dropout/Mul_1_grad/Mul"
  input: "^gradients/dropout/dropout/Mul_1_grad/Mul_1"
  experimental_debug_info {
  }
}
node {
  name: "gradients/dropout/dropout/Mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/dropout/dropout/Mul_1_grad/Mul"
  input: "^gradients/dropout/dropout/Mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_HALF
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/dropout/dropout/Mul_1_grad/Mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 500
          }
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "gradients/dropout/dropout/Mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/dropout/dropout/Mul_1_grad/Mul_1"
  input: "^gradients/dropout/dropout/Mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_HALF
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/dropout/dropout/Mul_1_grad/Mul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 500
          }
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "gradients/km_disable_scope_3/dense_1/MatMul/Cast_grad/Cast"
  op: "Cast"
  input: "gradients/km_disable_scope_3/dense_1/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_HALF
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 500
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "gradients/dropout/dropout/Mul_grad/BroadcastGradientArgs/s0"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\001\000\000\364\001\000\000"
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "gradients/dropout/dropout/Mul_grad/BroadcastGradientArgs/s1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "gradients/dropout/dropout/Mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/dropout/dropout/Mul_grad/BroadcastGradientArgs/s0"
  input: "gradients/dropout/dropout/Mul_grad/BroadcastGradientArgs/s1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "gradients/dropout/dropout/Mul_grad/Mul"
  op: "Mul"
  input: "gradients/dropout/dropout/Mul_1_grad/tuple/control_dependency"
  input: "dropout/dropout/Const"
  attr {
    key: "T"
    value {
      type: DT_HALF
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 500
          }
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "gradients/dropout/dropout/Mul_grad/Mul_1"
  op: "Mul"
  input: "activation/Relu"
  input: "gradients/dropout/dropout/Mul_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_HALF
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 500
          }
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "gradients/dropout/dropout/Mul_grad/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "gradients/dropout/dropout/Mul_grad/Sum"
  op: "Sum"
  input: "gradients/dropout/dropout/Mul_grad/Mul_1"
  input: "gradients/dropout/dropout/Mul_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_HALF
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "gradients/dropout/dropout/Mul_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "gradients/dropout/dropout/Mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/dropout/dropout/Mul_grad/Sum"
  input: "gradients/dropout/dropout/Mul_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_HALF
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "gradients/dropout/dropout/Mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/dropout/dropout/Mul_grad/Mul"
  input: "^gradients/dropout/dropout/Mul_grad/Reshape"
  experimental_debug_info {
  }
}
node {
  name: "gradients/dropout/dropout/Mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/dropout/dropout/Mul_grad/Mul"
  input: "^gradients/dropout/dropout/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_HALF
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/dropout/dropout/Mul_grad/Mul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 500
          }
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "gradients/dropout/dropout/Mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/dropout/dropout/Mul_grad/Reshape"
  input: "^gradients/dropout/dropout/Mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_HALF
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/dropout/dropout/Mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "gradients/activation/Relu_grad/ReluGrad"
  op: "ReluGrad"
  input: "gradients/dropout/dropout/Mul_grad/tuple/control_dependency"
  input: "activation/Relu"
  attr {
    key: "T"
    value {
      type: DT_HALF
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 500
          }
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "gradients/km_disable_scope_1/dense/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/activation/Relu_grad/ReluGrad"
  attr {
    key: "T"
    value {
      type: DT_HALF
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 500
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "gradients/km_disable_scope_1/dense/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/activation/Relu_grad/ReluGrad"
  input: "^gradients/km_disable_scope_1/dense/BiasAdd_grad/BiasAddGrad"
  experimental_debug_info {
  }
}
node {
  name: "gradients/km_disable_scope_1/dense/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/activation/Relu_grad/ReluGrad"
  input: "^gradients/km_disable_scope_1/dense/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_HALF
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/activation/Relu_grad/ReluGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 500
          }
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "gradients/km_disable_scope_1/dense/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/km_disable_scope_1/dense/BiasAdd_grad/BiasAddGrad"
  input: "^gradients/km_disable_scope_1/dense/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_HALF
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/km_disable_scope_1/dense/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 500
          }
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "gradients/km_disable_scope_1/dense/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/km_disable_scope_1/dense/BiasAdd_grad/tuple/control_dependency"
  input: "km_disable_scope_1/dense/MatMul/Cast"
  attr {
    key: "T"
    value {
      type: DT_HALF
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 784
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "gradients/km_disable_scope_1/dense/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "IteratorGetNext"
  input: "gradients/km_disable_scope_1/dense/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_HALF
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 784
          }
          dim {
            size: 500
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "gradients/km_disable_scope_1/dense/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^gradients/km_disable_scope_1/dense/MatMul_grad/MatMul"
  input: "^gradients/km_disable_scope_1/dense/MatMul_grad/MatMul_1"
  experimental_debug_info {
  }
}
node {
  name: "gradients/km_disable_scope_1/dense/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "gradients/km_disable_scope_1/dense/MatMul_grad/MatMul"
  input: "^gradients/km_disable_scope_1/dense/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_HALF
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/km_disable_scope_1/dense/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 256
          }
          dim {
            size: 784
          }
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "gradients/km_disable_scope_1/dense/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "gradients/km_disable_scope_1/dense/MatMul_grad/MatMul_1"
  input: "^gradients/km_disable_scope_1/dense/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_HALF
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@gradients/km_disable_scope_1/dense/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 784
          }
          dim {
            size: 500
          }
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "gradients/km_disable_scope_1/dense/BiasAdd/Cast_grad/Cast"
  op: "Cast"
  input: "gradients/km_disable_scope_1/dense/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_HALF
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 500
          }
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "gradients/km_disable_scope_1/dense/MatMul/Cast_grad/Cast"
  op: "Cast"
  input: "gradients/km_disable_scope_1/dense/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_HALF
    }
  }
  attr {
    key: "Truncate"
    value {
      b: false
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 784
          }
          dim {
            size: 500
          }
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "beta1_power/Initializer/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_1/dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "beta1_power"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_1/dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "beta1_power"
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "beta1_power/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "beta1_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_1/dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "beta1_power/Assign"
  op: "AssignVariableOp"
  input: "beta1_power"
  input: "beta1_power/Initializer/initial_value"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "beta1_power/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "beta1_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_1/dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "beta2_power/Initializer/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_1/dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "beta2_power"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_1/dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "beta2_power"
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "beta2_power/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "beta2_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_1/dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "beta2_power/Assign"
  op: "AssignVariableOp"
  input: "beta2_power"
  input: "beta2_power/Initializer/initial_value"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "beta2_power/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "beta2_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_1/dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_1/dense/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_1/dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\020\003\000\000\364\001\000\000"
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_1/dense/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_1/dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_1/dense/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "km_disable_scope_1/dense/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "km_disable_scope_1/dense/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_1/dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 784
          }
          dim {
            size: 500
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_1/dense/kernel/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_1/dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 784
        }
        dim {
          size: 500
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "km_disable_scope_1/dense/kernel/Adam"
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_1/dense/kernel/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "km_disable_scope_1/dense/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_1/dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_1/dense/kernel/Adam/Assign"
  op: "AssignVariableOp"
  input: "km_disable_scope_1/dense/kernel/Adam"
  input: "km_disable_scope_1/dense/kernel/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_1/dense/kernel/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "km_disable_scope_1/dense/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_1/dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 784
          }
          dim {
            size: 500
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_1/dense/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_1/dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\020\003\000\000\364\001\000\000"
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_1/dense/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_1/dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_1/dense/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "km_disable_scope_1/dense/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "km_disable_scope_1/dense/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_1/dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 784
          }
          dim {
            size: 500
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_1/dense/kernel/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_1/dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 784
        }
        dim {
          size: 500
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "km_disable_scope_1/dense/kernel/Adam_1"
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_1/dense/kernel/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "km_disable_scope_1/dense/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_1/dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_1/dense/kernel/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "km_disable_scope_1/dense/kernel/Adam_1"
  input: "km_disable_scope_1/dense/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_1/dense/kernel/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "km_disable_scope_1/dense/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_1/dense/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 784
          }
          dim {
            size: 500
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_1/dense/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_1/dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 500
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 500
          }
        }
        float_val: 0.0
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_1/dense/bias/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_1/dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 500
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "km_disable_scope_1/dense/bias/Adam"
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_1/dense/bias/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "km_disable_scope_1/dense/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_1/dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_1/dense/bias/Adam/Assign"
  op: "AssignVariableOp"
  input: "km_disable_scope_1/dense/bias/Adam"
  input: "km_disable_scope_1/dense/bias/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_1/dense/bias/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "km_disable_scope_1/dense/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_1/dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 500
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_1/dense/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_1/dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 500
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 500
          }
        }
        float_val: 0.0
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_1/dense/bias/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_1/dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 500
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "km_disable_scope_1/dense/bias/Adam_1"
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_1/dense/bias/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "km_disable_scope_1/dense/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_1/dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_1/dense/bias/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "km_disable_scope_1/dense/bias/Adam_1"
  input: "km_disable_scope_1/dense/bias/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_1/dense/bias/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "km_disable_scope_1/dense/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_1/dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 500
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_3/dense_1/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_3/dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\364\001\000\000,\001\000\000"
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_3/dense_1/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_3/dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_3/dense_1/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "km_disable_scope_3/dense_1/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "km_disable_scope_3/dense_1/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_3/dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 500
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_3/dense_1/kernel/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_3/dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 500
        }
        dim {
          size: 300
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "km_disable_scope_3/dense_1/kernel/Adam"
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_3/dense_1/kernel/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "km_disable_scope_3/dense_1/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_3/dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_3/dense_1/kernel/Adam/Assign"
  op: "AssignVariableOp"
  input: "km_disable_scope_3/dense_1/kernel/Adam"
  input: "km_disable_scope_3/dense_1/kernel/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_3/dense_1/kernel/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "km_disable_scope_3/dense_1/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_3/dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 500
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_3/dense_1/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_3/dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\364\001\000\000,\001\000\000"
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_3/dense_1/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_3/dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_3/dense_1/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "km_disable_scope_3/dense_1/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "km_disable_scope_3/dense_1/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_3/dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 500
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_3/dense_1/kernel/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_3/dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 500
        }
        dim {
          size: 300
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "km_disable_scope_3/dense_1/kernel/Adam_1"
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_3/dense_1/kernel/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "km_disable_scope_3/dense_1/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_3/dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_3/dense_1/kernel/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "km_disable_scope_3/dense_1/kernel/Adam_1"
  input: "km_disable_scope_3/dense_1/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_3/dense_1/kernel/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "km_disable_scope_3/dense_1/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_3/dense_1/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 500
          }
          dim {
            size: 300
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_3/dense_1/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_3/dense_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 300
          }
        }
        float_val: 0.0
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_3/dense_1/bias/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_3/dense_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 300
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "km_disable_scope_3/dense_1/bias/Adam"
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_3/dense_1/bias/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "km_disable_scope_3/dense_1/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_3/dense_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_3/dense_1/bias/Adam/Assign"
  op: "AssignVariableOp"
  input: "km_disable_scope_3/dense_1/bias/Adam"
  input: "km_disable_scope_3/dense_1/bias/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_3/dense_1/bias/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "km_disable_scope_3/dense_1/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_3/dense_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_3/dense_1/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_3/dense_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 300
          }
        }
        float_val: 0.0
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_3/dense_1/bias/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_3/dense_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 300
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "km_disable_scope_3/dense_1/bias/Adam_1"
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_3/dense_1/bias/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "km_disable_scope_3/dense_1/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_3/dense_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_3/dense_1/bias/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "km_disable_scope_3/dense_1/bias/Adam_1"
  input: "km_disable_scope_3/dense_1/bias/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_3/dense_1/bias/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "km_disable_scope_3/dense_1/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_3/dense_1/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_4/dense_2/kernel/Adam/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_4/dense_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: ",\001\000\000\n\000\000\000"
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_4/dense_2/kernel/Adam/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_4/dense_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_4/dense_2/kernel/Adam/Initializer/zeros"
  op: "Fill"
  input: "km_disable_scope_4/dense_2/kernel/Adam/Initializer/zeros/shape_as_tensor"
  input: "km_disable_scope_4/dense_2/kernel/Adam/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_4/dense_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_4/dense_2/kernel/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_4/dense_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 300
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "km_disable_scope_4/dense_2/kernel/Adam"
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_4/dense_2/kernel/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "km_disable_scope_4/dense_2/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_4/dense_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_4/dense_2/kernel/Adam/Assign"
  op: "AssignVariableOp"
  input: "km_disable_scope_4/dense_2/kernel/Adam"
  input: "km_disable_scope_4/dense_2/kernel/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_4/dense_2/kernel/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "km_disable_scope_4/dense_2/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_4/dense_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_4/dense_2/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_4/dense_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: ",\001\000\000\n\000\000\000"
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_4/dense_2/kernel/Adam_1/Initializer/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_4/dense_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_4/dense_2/kernel/Adam_1/Initializer/zeros"
  op: "Fill"
  input: "km_disable_scope_4/dense_2/kernel/Adam_1/Initializer/zeros/shape_as_tensor"
  input: "km_disable_scope_4/dense_2/kernel/Adam_1/Initializer/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_4/dense_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "index_type"
    value {
      type: DT_INT32
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_4/dense_2/kernel/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_4/dense_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 300
        }
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "km_disable_scope_4/dense_2/kernel/Adam_1"
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_4/dense_2/kernel/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "km_disable_scope_4/dense_2/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_4/dense_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_4/dense_2/kernel/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "km_disable_scope_4/dense_2/kernel/Adam_1"
  input: "km_disable_scope_4/dense_2/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_4/dense_2/kernel/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "km_disable_scope_4/dense_2/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_4/dense_2/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 300
          }
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_4/dense_2/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_4/dense_2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_4/dense_2/bias/Adam"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_4/dense_2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "km_disable_scope_4/dense_2/bias/Adam"
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_4/dense_2/bias/Adam/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "km_disable_scope_4/dense_2/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_4/dense_2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_4/dense_2/bias/Adam/Assign"
  op: "AssignVariableOp"
  input: "km_disable_scope_4/dense_2/bias/Adam"
  input: "km_disable_scope_4/dense_2/bias/Adam/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_4/dense_2/bias/Adam/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "km_disable_scope_4/dense_2/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_4/dense_2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_4/dense_2/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_4/dense_2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 10
          }
        }
        float_val: 0.0
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_4/dense_2/bias/Adam_1"
  op: "VarHandleOp"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_4/dense_2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 10
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: "km_disable_scope_4/dense_2/bias/Adam_1"
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_4/dense_2/bias/Adam_1/IsInitialized/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "km_disable_scope_4/dense_2/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_4/dense_2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_4/dense_2/bias/Adam_1/Assign"
  op: "AssignVariableOp"
  input: "km_disable_scope_4/dense_2/bias/Adam_1"
  input: "km_disable_scope_4/dense_2/bias/Adam_1/Initializer/zeros"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "km_disable_scope_4/dense_2/bias/Adam_1/Read/ReadVariableOp"
  op: "ReadVariableOp"
  input: "km_disable_scope_4/dense_2/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_4/dense_2/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 10
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "Adam/learning_rate"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "Adam/beta1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "Adam/beta2"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "Adam/epsilon"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999993922529e-09
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "Adam/update_km_disable_scope_1/dense/kernel/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "beta1_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "Adam/update_km_disable_scope_1/dense/kernel/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "beta2_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "Adam/update_km_disable_scope_1/dense/kernel/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "km_disable_scope_1/dense/kernel"
  input: "km_disable_scope_1/dense/kernel/Adam"
  input: "km_disable_scope_1/dense/kernel/Adam_1"
  input: "Adam/update_km_disable_scope_1/dense/kernel/ResourceApplyAdam/ReadVariableOp"
  input: "Adam/update_km_disable_scope_1/dense/kernel/ResourceApplyAdam/ReadVariableOp_1"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/km_disable_scope_1/dense/MatMul/Cast_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_1/dense/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "Adam/update_km_disable_scope_1/dense/bias/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "beta1_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "Adam/update_km_disable_scope_1/dense/bias/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "beta2_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "Adam/update_km_disable_scope_1/dense/bias/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "km_disable_scope_1/dense/bias"
  input: "km_disable_scope_1/dense/bias/Adam"
  input: "km_disable_scope_1/dense/bias/Adam_1"
  input: "Adam/update_km_disable_scope_1/dense/bias/ResourceApplyAdam/ReadVariableOp"
  input: "Adam/update_km_disable_scope_1/dense/bias/ResourceApplyAdam/ReadVariableOp_1"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/km_disable_scope_1/dense/BiasAdd/Cast_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_1/dense/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "Adam/update_km_disable_scope_3/dense_1/kernel/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "beta1_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "Adam/update_km_disable_scope_3/dense_1/kernel/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "beta2_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "Adam/update_km_disable_scope_3/dense_1/kernel/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "km_disable_scope_3/dense_1/kernel"
  input: "km_disable_scope_3/dense_1/kernel/Adam"
  input: "km_disable_scope_3/dense_1/kernel/Adam_1"
  input: "Adam/update_km_disable_scope_3/dense_1/kernel/ResourceApplyAdam/ReadVariableOp"
  input: "Adam/update_km_disable_scope_3/dense_1/kernel/ResourceApplyAdam/ReadVariableOp_1"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/km_disable_scope_3/dense_1/MatMul/Cast_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_3/dense_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "Adam/update_km_disable_scope_3/dense_1/bias/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "beta1_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "Adam/update_km_disable_scope_3/dense_1/bias/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "beta2_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "Adam/update_km_disable_scope_3/dense_1/bias/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "km_disable_scope_3/dense_1/bias"
  input: "km_disable_scope_3/dense_1/bias/Adam"
  input: "km_disable_scope_3/dense_1/bias/Adam_1"
  input: "Adam/update_km_disable_scope_3/dense_1/bias/ResourceApplyAdam/ReadVariableOp"
  input: "Adam/update_km_disable_scope_3/dense_1/bias/ResourceApplyAdam/ReadVariableOp_1"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/km_disable_scope_3/dense_1/BiasAdd/Cast_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_3/dense_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "Adam/update_km_disable_scope_4/dense_2/kernel/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "beta1_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "Adam/update_km_disable_scope_4/dense_2/kernel/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "beta2_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "Adam/update_km_disable_scope_4/dense_2/kernel/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "km_disable_scope_4/dense_2/kernel"
  input: "km_disable_scope_4/dense_2/kernel/Adam"
  input: "km_disable_scope_4/dense_2/kernel/Adam_1"
  input: "Adam/update_km_disable_scope_4/dense_2/kernel/ResourceApplyAdam/ReadVariableOp"
  input: "Adam/update_km_disable_scope_4/dense_2/kernel/ResourceApplyAdam/ReadVariableOp_1"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/km_disable_scope_4/dense_2/MatMul/Cast_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_4/dense_2/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "Adam/update_km_disable_scope_4/dense_2/bias/ResourceApplyAdam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "beta1_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "Adam/update_km_disable_scope_4/dense_2/bias/ResourceApplyAdam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "beta2_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "Adam/update_km_disable_scope_4/dense_2/bias/ResourceApplyAdam"
  op: "ResourceApplyAdam"
  input: "km_disable_scope_4/dense_2/bias"
  input: "km_disable_scope_4/dense_2/bias/Adam"
  input: "km_disable_scope_4/dense_2/bias/Adam_1"
  input: "Adam/update_km_disable_scope_4/dense_2/bias/ResourceApplyAdam/ReadVariableOp"
  input: "Adam/update_km_disable_scope_4/dense_2/bias/ResourceApplyAdam/ReadVariableOp_1"
  input: "Adam/learning_rate"
  input: "Adam/beta1"
  input: "Adam/beta2"
  input: "Adam/epsilon"
  input: "gradients/km_disable_scope_4/dense_2/BiasAdd/Cast_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_4/dense_2/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "Adam/ReadVariableOp"
  op: "ReadVariableOp"
  input: "beta1_power"
  input: "^Adam/update_km_disable_scope_1/dense/bias/ResourceApplyAdam"
  input: "^Adam/update_km_disable_scope_1/dense/kernel/ResourceApplyAdam"
  input: "^Adam/update_km_disable_scope_3/dense_1/bias/ResourceApplyAdam"
  input: "^Adam/update_km_disable_scope_3/dense_1/kernel/ResourceApplyAdam"
  input: "^Adam/update_km_disable_scope_4/dense_2/bias/ResourceApplyAdam"
  input: "^Adam/update_km_disable_scope_4/dense_2/kernel/ResourceApplyAdam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "Adam/mul"
  op: "Mul"
  input: "Adam/ReadVariableOp"
  input: "Adam/beta1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_1/dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "Adam/AssignVariableOp"
  op: "AssignVariableOp"
  input: "beta1_power"
  input: "Adam/mul"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_1/dense/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "Adam/ReadVariableOp_1"
  op: "ReadVariableOp"
  input: "beta1_power"
  input: "^Adam/AssignVariableOp"
  input: "^Adam/update_km_disable_scope_1/dense/bias/ResourceApplyAdam"
  input: "^Adam/update_km_disable_scope_1/dense/kernel/ResourceApplyAdam"
  input: "^Adam/update_km_disable_scope_3/dense_1/bias/ResourceApplyAdam"
  input: "^Adam/update_km_disable_scope_3/dense_1/kernel/ResourceApplyAdam"
  input: "^Adam/update_km_disable_scope_4/dense_2/bias/ResourceApplyAdam"
  input: "^Adam/update_km_disable_scope_4/dense_2/kernel/ResourceApplyAdam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_1/dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "Adam/ReadVariableOp_2"
  op: "ReadVariableOp"
  input: "beta2_power"
  input: "^Adam/update_km_disable_scope_1/dense/bias/ResourceApplyAdam"
  input: "^Adam/update_km_disable_scope_1/dense/kernel/ResourceApplyAdam"
  input: "^Adam/update_km_disable_scope_3/dense_1/bias/ResourceApplyAdam"
  input: "^Adam/update_km_disable_scope_3/dense_1/kernel/ResourceApplyAdam"
  input: "^Adam/update_km_disable_scope_4/dense_2/bias/ResourceApplyAdam"
  input: "^Adam/update_km_disable_scope_4/dense_2/kernel/ResourceApplyAdam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "Adam/mul_1"
  op: "Mul"
  input: "Adam/ReadVariableOp_2"
  input: "Adam/beta2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_1/dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "Adam/AssignVariableOp_1"
  op: "AssignVariableOp"
  input: "beta2_power"
  input: "Adam/mul_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_1/dense/bias"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "Adam/ReadVariableOp_3"
  op: "ReadVariableOp"
  input: "beta2_power"
  input: "^Adam/AssignVariableOp_1"
  input: "^Adam/update_km_disable_scope_1/dense/bias/ResourceApplyAdam"
  input: "^Adam/update_km_disable_scope_1/dense/kernel/ResourceApplyAdam"
  input: "^Adam/update_km_disable_scope_3/dense_1/bias/ResourceApplyAdam"
  input: "^Adam/update_km_disable_scope_3/dense_1/kernel/ResourceApplyAdam"
  input: "^Adam/update_km_disable_scope_4/dense_2/bias/ResourceApplyAdam"
  input: "^Adam/update_km_disable_scope_4/dense_2/kernel/ResourceApplyAdam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@km_disable_scope_1/dense/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "Adam/update"
  op: "NoOp"
  input: "^Adam/AssignVariableOp"
  input: "^Adam/AssignVariableOp_1"
  input: "^Adam/update_km_disable_scope_1/dense/bias/ResourceApplyAdam"
  input: "^Adam/update_km_disable_scope_1/dense/kernel/ResourceApplyAdam"
  input: "^Adam/update_km_disable_scope_3/dense_1/bias/ResourceApplyAdam"
  input: "^Adam/update_km_disable_scope_3/dense_1/kernel/ResourceApplyAdam"
  input: "^Adam/update_km_disable_scope_4/dense_2/bias/ResourceApplyAdam"
  input: "^Adam/update_km_disable_scope_4/dense_2/kernel/ResourceApplyAdam"
  experimental_debug_info {
  }
}
node {
  name: "Adam/Const"
  op: "Const"
  input: "^Adam/update"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "Adam"
  op: "AssignAddVariableOp"
  input: "global_step"
  input: "Adam/Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^beta1_power/Assign"
  input: "^beta2_power/Assign"
  input: "^global_step/Assign"
  input: "^km_disable_scope_1/dense/bias/Adam/Assign"
  input: "^km_disable_scope_1/dense/bias/Adam_1/Assign"
  input: "^km_disable_scope_1/dense/bias/Assign"
  input: "^km_disable_scope_1/dense/kernel/Adam/Assign"
  input: "^km_disable_scope_1/dense/kernel/Adam_1/Assign"
  input: "^km_disable_scope_1/dense/kernel/Assign"
  input: "^km_disable_scope_3/dense_1/bias/Adam/Assign"
  input: "^km_disable_scope_3/dense_1/bias/Adam_1/Assign"
  input: "^km_disable_scope_3/dense_1/bias/Assign"
  input: "^km_disable_scope_3/dense_1/kernel/Adam/Assign"
  input: "^km_disable_scope_3/dense_1/kernel/Adam_1/Assign"
  input: "^km_disable_scope_3/dense_1/kernel/Assign"
  input: "^km_disable_scope_4/dense_2/bias/Adam/Assign"
  input: "^km_disable_scope_4/dense_2/bias/Adam_1/Assign"
  input: "^km_disable_scope_4/dense_2/bias/Assign"
  input: "^km_disable_scope_4/dense_2/kernel/Adam/Assign"
  input: "^km_disable_scope_4/dense_2/kernel/Adam_1/Assign"
  input: "^km_disable_scope_4/dense_2/kernel/Assign"
  experimental_debug_info {
  }
}
node {
  name: "init_1"
  op: "NoOp"
  experimental_debug_info {
  }
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^init"
  input: "^init_1"
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_1"
  op: "VarIsInitializedOp"
  input: "km_disable_scope_1/dense/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_2"
  op: "VarIsInitializedOp"
  input: "km_disable_scope_1/dense/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_3"
  op: "VarIsInitializedOp"
  input: "km_disable_scope_3/dense_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_4"
  op: "VarIsInitializedOp"
  input: "km_disable_scope_3/dense_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_5"
  op: "VarIsInitializedOp"
  input: "km_disable_scope_4/dense_2/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_6"
  op: "VarIsInitializedOp"
  input: "km_disable_scope_4/dense_2/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_7"
  op: "VarIsInitializedOp"
  input: "beta1_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_8"
  op: "VarIsInitializedOp"
  input: "beta2_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_9"
  op: "VarIsInitializedOp"
  input: "km_disable_scope_1/dense/kernel/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_10"
  op: "VarIsInitializedOp"
  input: "km_disable_scope_1/dense/kernel/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_11"
  op: "VarIsInitializedOp"
  input: "km_disable_scope_1/dense/bias/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_12"
  op: "VarIsInitializedOp"
  input: "km_disable_scope_1/dense/bias/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_13"
  op: "VarIsInitializedOp"
  input: "km_disable_scope_3/dense_1/kernel/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_14"
  op: "VarIsInitializedOp"
  input: "km_disable_scope_3/dense_1/kernel/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_15"
  op: "VarIsInitializedOp"
  input: "km_disable_scope_3/dense_1/bias/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_16"
  op: "VarIsInitializedOp"
  input: "km_disable_scope_3/dense_1/bias/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_17"
  op: "VarIsInitializedOp"
  input: "km_disable_scope_4/dense_2/kernel/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_18"
  op: "VarIsInitializedOp"
  input: "km_disable_scope_4/dense_2/kernel/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_19"
  op: "VarIsInitializedOp"
  input: "km_disable_scope_4/dense_2/bias/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables/VarIsInitializedOp_20"
  op: "VarIsInitializedOp"
  input: "km_disable_scope_4/dense_2/bias/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables/stack"
  op: "Pack"
  input: "report_uninitialized_variables/VarIsInitializedOp"
  input: "report_uninitialized_variables/VarIsInitializedOp_1"
  input: "report_uninitialized_variables/VarIsInitializedOp_2"
  input: "report_uninitialized_variables/VarIsInitializedOp_3"
  input: "report_uninitialized_variables/VarIsInitializedOp_4"
  input: "report_uninitialized_variables/VarIsInitializedOp_5"
  input: "report_uninitialized_variables/VarIsInitializedOp_6"
  input: "report_uninitialized_variables/VarIsInitializedOp_7"
  input: "report_uninitialized_variables/VarIsInitializedOp_8"
  input: "report_uninitialized_variables/VarIsInitializedOp_9"
  input: "report_uninitialized_variables/VarIsInitializedOp_10"
  input: "report_uninitialized_variables/VarIsInitializedOp_11"
  input: "report_uninitialized_variables/VarIsInitializedOp_12"
  input: "report_uninitialized_variables/VarIsInitializedOp_13"
  input: "report_uninitialized_variables/VarIsInitializedOp_14"
  input: "report_uninitialized_variables/VarIsInitializedOp_15"
  input: "report_uninitialized_variables/VarIsInitializedOp_16"
  input: "report_uninitialized_variables/VarIsInitializedOp_17"
  input: "report_uninitialized_variables/VarIsInitializedOp_18"
  input: "report_uninitialized_variables/VarIsInitializedOp_19"
  input: "report_uninitialized_variables/VarIsInitializedOp_20"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 21
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 21
          }
        }
        string_val: "global_step"
        string_val: "km_disable_scope_1/dense/kernel"
        string_val: "km_disable_scope_1/dense/bias"
        string_val: "km_disable_scope_3/dense_1/kernel"
        string_val: "km_disable_scope_3/dense_1/bias"
        string_val: "km_disable_scope_4/dense_2/kernel"
        string_val: "km_disable_scope_4/dense_2/bias"
        string_val: "beta1_power"
        string_val: "beta2_power"
        string_val: "km_disable_scope_1/dense/kernel/Adam"
        string_val: "km_disable_scope_1/dense/kernel/Adam_1"
        string_val: "km_disable_scope_1/dense/bias/Adam"
        string_val: "km_disable_scope_1/dense/bias/Adam_1"
        string_val: "km_disable_scope_3/dense_1/kernel/Adam"
        string_val: "km_disable_scope_3/dense_1/kernel/Adam_1"
        string_val: "km_disable_scope_3/dense_1/bias/Adam"
        string_val: "km_disable_scope_3/dense_1/bias/Adam_1"
        string_val: "km_disable_scope_4/dense_2/kernel/Adam"
        string_val: "km_disable_scope_4/dense_2/kernel/Adam_1"
        string_val: "km_disable_scope_4/dense_2/bias/Adam"
        string_val: "km_disable_scope_4/dense_2/bias/Adam_1"
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 21
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables/boolean_mask/strided_slice"
  input: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 21
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 21
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables/Const"
  input: "report_uninitialized_variables/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables/LogicalNot"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables/boolean_mask/Reshape"
  input: "report_uninitialized_variables/boolean_mask/Squeeze"
  input: "report_uninitialized_variables/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_resources/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "concat/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/GatherV2"
  input: "report_uninitialized_resources/Const"
  input: "concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp"
  op: "VarIsInitializedOp"
  input: "global_step"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_1"
  op: "VarIsInitializedOp"
  input: "km_disable_scope_1/dense/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_2"
  op: "VarIsInitializedOp"
  input: "km_disable_scope_1/dense/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_3"
  op: "VarIsInitializedOp"
  input: "km_disable_scope_3/dense_1/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_4"
  op: "VarIsInitializedOp"
  input: "km_disable_scope_3/dense_1/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_5"
  op: "VarIsInitializedOp"
  input: "km_disable_scope_4/dense_2/kernel"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_6"
  op: "VarIsInitializedOp"
  input: "km_disable_scope_4/dense_2/bias"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_7"
  op: "VarIsInitializedOp"
  input: "beta1_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_8"
  op: "VarIsInitializedOp"
  input: "beta2_power"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_9"
  op: "VarIsInitializedOp"
  input: "km_disable_scope_1/dense/kernel/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_10"
  op: "VarIsInitializedOp"
  input: "km_disable_scope_1/dense/kernel/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_11"
  op: "VarIsInitializedOp"
  input: "km_disable_scope_1/dense/bias/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_12"
  op: "VarIsInitializedOp"
  input: "km_disable_scope_1/dense/bias/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_13"
  op: "VarIsInitializedOp"
  input: "km_disable_scope_3/dense_1/kernel/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_14"
  op: "VarIsInitializedOp"
  input: "km_disable_scope_3/dense_1/kernel/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_15"
  op: "VarIsInitializedOp"
  input: "km_disable_scope_3/dense_1/bias/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_16"
  op: "VarIsInitializedOp"
  input: "km_disable_scope_3/dense_1/bias/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_17"
  op: "VarIsInitializedOp"
  input: "km_disable_scope_4/dense_2/kernel/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_18"
  op: "VarIsInitializedOp"
  input: "km_disable_scope_4/dense_2/kernel/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_19"
  op: "VarIsInitializedOp"
  input: "km_disable_scope_4/dense_2/bias/Adam"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables_1/VarIsInitializedOp_20"
  op: "VarIsInitializedOp"
  input: "km_disable_scope_4/dense_2/bias/Adam_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables_1/stack"
  op: "Pack"
  input: "report_uninitialized_variables_1/VarIsInitializedOp"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_1"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_2"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_3"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_4"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_5"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_6"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_7"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_8"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_9"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_10"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_11"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_12"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_13"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_14"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_15"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_16"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_17"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_18"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_19"
  input: "report_uninitialized_variables_1/VarIsInitializedOp_20"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 21
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables_1/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables_1/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables_1/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 21
          }
        }
        string_val: "global_step"
        string_val: "km_disable_scope_1/dense/kernel"
        string_val: "km_disable_scope_1/dense/bias"
        string_val: "km_disable_scope_3/dense_1/kernel"
        string_val: "km_disable_scope_3/dense_1/bias"
        string_val: "km_disable_scope_4/dense_2/kernel"
        string_val: "km_disable_scope_4/dense_2/bias"
        string_val: "beta1_power"
        string_val: "beta2_power"
        string_val: "km_disable_scope_1/dense/kernel/Adam"
        string_val: "km_disable_scope_1/dense/kernel/Adam_1"
        string_val: "km_disable_scope_1/dense/bias/Adam"
        string_val: "km_disable_scope_1/dense/bias/Adam_1"
        string_val: "km_disable_scope_3/dense_1/kernel/Adam"
        string_val: "km_disable_scope_3/dense_1/kernel/Adam_1"
        string_val: "km_disable_scope_3/dense_1/bias/Adam"
        string_val: "km_disable_scope_3/dense_1/bias/Adam_1"
        string_val: "km_disable_scope_4/dense_2/kernel/Adam"
        string_val: "km_disable_scope_4/dense_2/kernel/Adam_1"
        string_val: "km_disable_scope_4/dense_2/bias/Adam"
        string_val: "km_disable_scope_4/dense_2/bias/Adam_1"
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 21
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  input: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 21
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 21
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  op: "Pack"
  input: "report_uninitialized_variables_1/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables_1/boolean_mask/concat/values_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_2"
  input: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables_1/Const"
  input: "report_uninitialized_variables_1/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables_1/LogicalNot"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/GatherV2/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/GatherV2"
  op: "GatherV2"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape"
  input: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/GatherV2/axis"
  device: "/device:CPU:0"
  attr {
    key: "Taxis"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "batch_dims"
    value {
      i: 0
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "report_uninitialized_resources_1/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "concat_1/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "concat_1"
  op: "ConcatV2"
  input: "report_uninitialized_variables_1/boolean_mask/GatherV2"
  input: "report_uninitialized_resources_1/Const"
  input: "concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "init_2"
  op: "NoOp"
  experimental_debug_info {
  }
}
node {
  name: "init_all_tables"
  op: "NoOp"
  experimental_debug_info {
  }
}
node {
  name: "init_3"
  op: "NoOp"
  experimental_debug_info {
  }
}
node {
  name: "group_deps_1"
  op: "NoOp"
  input: "^init_2"
  input: "^init_3"
  input: "^init_all_tables"
  experimental_debug_info {
  }
}
node {
  name: "Merge/MergeSummary"
  op: "MergeSummary"
  input: "loss"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "save/filename/input"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "save/filename"
  op: "PlaceholderWithDefault"
  input: "save/filename/input"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "save/Const"
  op: "PlaceholderWithDefault"
  input: "save/filename"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "save/StaticRegexFullMatch"
  op: "StaticRegexFullMatch"
  input: "save/Const"
  device: "/device:CPU:*"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "pattern"
    value {
      s: "^s3://.*"
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "save/Const_1"
  op: "Const"
  device: "/device:CPU:*"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: ".part"
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "save/Const_2"
  op: "Const"
  device: "/device:CPU:*"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "_temp_8b71b71a659e424b8024b55c0548303c/part"
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "save/Select"
  op: "Select"
  input: "save/StaticRegexFullMatch"
  input: "save/Const_1"
  input: "save/Const_2"
  device: "/device:CPU:*"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "save/StringJoin"
  op: "StringJoin"
  input: "save/Const"
  input: "save/Select"
  device: "/device:CPU:*"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "separator"
    value {
      s: ""
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "save/num_shards"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "save/ShardedFilename/shard"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "save/ShardedFilename"
  op: "ShardedFilename"
  input: "save/StringJoin"
  input: "save/ShardedFilename/shard"
  input: "save/num_shards"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "save/SaveV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 21
          }
        }
        string_val: "beta1_power"
        string_val: "beta2_power"
        string_val: "global_step"
        string_val: "km_disable_scope_1/dense/bias"
        string_val: "km_disable_scope_1/dense/bias/Adam"
        string_val: "km_disable_scope_1/dense/bias/Adam_1"
        string_val: "km_disable_scope_1/dense/kernel"
        string_val: "km_disable_scope_1/dense/kernel/Adam"
        string_val: "km_disable_scope_1/dense/kernel/Adam_1"
        string_val: "km_disable_scope_3/dense_1/bias"
        string_val: "km_disable_scope_3/dense_1/bias/Adam"
        string_val: "km_disable_scope_3/dense_1/bias/Adam_1"
        string_val: "km_disable_scope_3/dense_1/kernel"
        string_val: "km_disable_scope_3/dense_1/kernel/Adam"
        string_val: "km_disable_scope_3/dense_1/kernel/Adam_1"
        string_val: "km_disable_scope_4/dense_2/bias"
        string_val: "km_disable_scope_4/dense_2/bias/Adam"
        string_val: "km_disable_scope_4/dense_2/bias/Adam_1"
        string_val: "km_disable_scope_4/dense_2/kernel"
        string_val: "km_disable_scope_4/dense_2/kernel/Adam"
        string_val: "km_disable_scope_4/dense_2/kernel/Adam_1"
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "save/SaveV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 21
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "save/SaveV2"
  op: "SaveV2"
  input: "save/ShardedFilename"
  input: "save/SaveV2/tensor_names"
  input: "save/SaveV2/shape_and_slices"
  input: "beta1_power/Read/ReadVariableOp"
  input: "beta2_power/Read/ReadVariableOp"
  input: "global_step/Read/ReadVariableOp"
  input: "km_disable_scope_1/dense/bias/Read/ReadVariableOp"
  input: "km_disable_scope_1/dense/bias/Adam/Read/ReadVariableOp"
  input: "km_disable_scope_1/dense/bias/Adam_1/Read/ReadVariableOp"
  input: "km_disable_scope_1/dense/kernel/Read/ReadVariableOp"
  input: "km_disable_scope_1/dense/kernel/Adam/Read/ReadVariableOp"
  input: "km_disable_scope_1/dense/kernel/Adam_1/Read/ReadVariableOp"
  input: "km_disable_scope_3/dense_1/bias/Read/ReadVariableOp"
  input: "km_disable_scope_3/dense_1/bias/Adam/Read/ReadVariableOp"
  input: "km_disable_scope_3/dense_1/bias/Adam_1/Read/ReadVariableOp"
  input: "km_disable_scope_3/dense_1/kernel/Read/ReadVariableOp"
  input: "km_disable_scope_3/dense_1/kernel/Adam/Read/ReadVariableOp"
  input: "km_disable_scope_3/dense_1/kernel/Adam_1/Read/ReadVariableOp"
  input: "km_disable_scope_4/dense_2/bias/Read/ReadVariableOp"
  input: "km_disable_scope_4/dense_2/bias/Adam/Read/ReadVariableOp"
  input: "km_disable_scope_4/dense_2/bias/Adam_1/Read/ReadVariableOp"
  input: "km_disable_scope_4/dense_2/kernel/Read/ReadVariableOp"
  input: "km_disable_scope_4/dense_2/kernel/Adam/Read/ReadVariableOp"
  input: "km_disable_scope_4/dense_2/kernel/Adam_1/Read/ReadVariableOp"
  device: "/device:CPU:0"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/ShardedFilename"
  input: "^save/SaveV2"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/ShardedFilename"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "save/MergeV2Checkpoints/checkpoint_prefixes"
  op: "Pack"
  input: "save/ShardedFilename"
  input: "^save/control_dependency"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "save/MergeV2Checkpoints"
  op: "MergeV2Checkpoints"
  input: "save/MergeV2Checkpoints/checkpoint_prefixes"
  input: "save/Const"
  device: "/device:CPU:0"
  attr {
    key: "delete_old_dirs"
    value {
      b: true
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "save/Identity"
  op: "Identity"
  input: "save/Const"
  input: "^save/MergeV2Checkpoints"
  input: "^save/control_dependency"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "save/RestoreV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 21
          }
        }
        string_val: "beta1_power"
        string_val: "beta2_power"
        string_val: "global_step"
        string_val: "km_disable_scope_1/dense/bias"
        string_val: "km_disable_scope_1/dense/bias/Adam"
        string_val: "km_disable_scope_1/dense/bias/Adam_1"
        string_val: "km_disable_scope_1/dense/kernel"
        string_val: "km_disable_scope_1/dense/kernel/Adam"
        string_val: "km_disable_scope_1/dense/kernel/Adam_1"
        string_val: "km_disable_scope_3/dense_1/bias"
        string_val: "km_disable_scope_3/dense_1/bias/Adam"
        string_val: "km_disable_scope_3/dense_1/bias/Adam_1"
        string_val: "km_disable_scope_3/dense_1/kernel"
        string_val: "km_disable_scope_3/dense_1/kernel/Adam"
        string_val: "km_disable_scope_3/dense_1/kernel/Adam_1"
        string_val: "km_disable_scope_4/dense_2/bias"
        string_val: "km_disable_scope_4/dense_2/bias/Adam"
        string_val: "km_disable_scope_4/dense_2/bias/Adam_1"
        string_val: "km_disable_scope_4/dense_2/kernel"
        string_val: "km_disable_scope_4/dense_2/kernel/Adam"
        string_val: "km_disable_scope_4/dense_2/kernel/Adam_1"
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "save/RestoreV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 21
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "save/RestoreV2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2/tensor_names"
  input: "save/RestoreV2/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "save/Identity_1"
  op: "Identity"
  input: "save/RestoreV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "save/AssignVariableOp"
  op: "AssignVariableOp"
  input: "beta1_power"
  input: "save/Identity_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "save/Identity_2"
  op: "Identity"
  input: "save/RestoreV2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "save/AssignVariableOp_1"
  op: "AssignVariableOp"
  input: "beta2_power"
  input: "save/Identity_2"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "save/Identity_3"
  op: "Identity"
  input: "save/RestoreV2:2"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "save/AssignVariableOp_2"
  op: "AssignVariableOp"
  input: "global_step"
  input: "save/Identity_3"
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "save/Identity_4"
  op: "Identity"
  input: "save/RestoreV2:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "save/AssignVariableOp_3"
  op: "AssignVariableOp"
  input: "km_disable_scope_1/dense/bias"
  input: "save/Identity_4"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "save/Identity_5"
  op: "Identity"
  input: "save/RestoreV2:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "save/AssignVariableOp_4"
  op: "AssignVariableOp"
  input: "km_disable_scope_1/dense/bias/Adam"
  input: "save/Identity_5"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "save/Identity_6"
  op: "Identity"
  input: "save/RestoreV2:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "save/AssignVariableOp_5"
  op: "AssignVariableOp"
  input: "km_disable_scope_1/dense/bias/Adam_1"
  input: "save/Identity_6"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "save/Identity_7"
  op: "Identity"
  input: "save/RestoreV2:6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "save/AssignVariableOp_6"
  op: "AssignVariableOp"
  input: "km_disable_scope_1/dense/kernel"
  input: "save/Identity_7"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "save/Identity_8"
  op: "Identity"
  input: "save/RestoreV2:7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "save/AssignVariableOp_7"
  op: "AssignVariableOp"
  input: "km_disable_scope_1/dense/kernel/Adam"
  input: "save/Identity_8"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "save/Identity_9"
  op: "Identity"
  input: "save/RestoreV2:8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "save/AssignVariableOp_8"
  op: "AssignVariableOp"
  input: "km_disable_scope_1/dense/kernel/Adam_1"
  input: "save/Identity_9"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "save/Identity_10"
  op: "Identity"
  input: "save/RestoreV2:9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "save/AssignVariableOp_9"
  op: "AssignVariableOp"
  input: "km_disable_scope_3/dense_1/bias"
  input: "save/Identity_10"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "save/Identity_11"
  op: "Identity"
  input: "save/RestoreV2:10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "save/AssignVariableOp_10"
  op: "AssignVariableOp"
  input: "km_disable_scope_3/dense_1/bias/Adam"
  input: "save/Identity_11"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "save/Identity_12"
  op: "Identity"
  input: "save/RestoreV2:11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "save/AssignVariableOp_11"
  op: "AssignVariableOp"
  input: "km_disable_scope_3/dense_1/bias/Adam_1"
  input: "save/Identity_12"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "save/Identity_13"
  op: "Identity"
  input: "save/RestoreV2:12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "save/AssignVariableOp_12"
  op: "AssignVariableOp"
  input: "km_disable_scope_3/dense_1/kernel"
  input: "save/Identity_13"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "save/Identity_14"
  op: "Identity"
  input: "save/RestoreV2:13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "save/AssignVariableOp_13"
  op: "AssignVariableOp"
  input: "km_disable_scope_3/dense_1/kernel/Adam"
  input: "save/Identity_14"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "save/Identity_15"
  op: "Identity"
  input: "save/RestoreV2:14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "save/AssignVariableOp_14"
  op: "AssignVariableOp"
  input: "km_disable_scope_3/dense_1/kernel/Adam_1"
  input: "save/Identity_15"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "save/Identity_16"
  op: "Identity"
  input: "save/RestoreV2:15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "save/AssignVariableOp_15"
  op: "AssignVariableOp"
  input: "km_disable_scope_4/dense_2/bias"
  input: "save/Identity_16"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "save/Identity_17"
  op: "Identity"
  input: "save/RestoreV2:16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "save/AssignVariableOp_16"
  op: "AssignVariableOp"
  input: "km_disable_scope_4/dense_2/bias/Adam"
  input: "save/Identity_17"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "save/Identity_18"
  op: "Identity"
  input: "save/RestoreV2:17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "save/AssignVariableOp_17"
  op: "AssignVariableOp"
  input: "km_disable_scope_4/dense_2/bias/Adam_1"
  input: "save/Identity_18"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "save/Identity_19"
  op: "Identity"
  input: "save/RestoreV2:18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "save/AssignVariableOp_18"
  op: "AssignVariableOp"
  input: "km_disable_scope_4/dense_2/kernel"
  input: "save/Identity_19"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "save/Identity_20"
  op: "Identity"
  input: "save/RestoreV2:19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "save/AssignVariableOp_19"
  op: "AssignVariableOp"
  input: "km_disable_scope_4/dense_2/kernel/Adam"
  input: "save/Identity_20"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "save/Identity_21"
  op: "Identity"
  input: "save/RestoreV2:20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "save/AssignVariableOp_20"
  op: "AssignVariableOp"
  input: "km_disable_scope_4/dense_2/kernel/Adam_1"
  input: "save/Identity_21"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  experimental_debug_info {
  }
}
node {
  name: "save/restore_shard"
  op: "NoOp"
  input: "^save/AssignVariableOp"
  input: "^save/AssignVariableOp_1"
  input: "^save/AssignVariableOp_10"
  input: "^save/AssignVariableOp_11"
  input: "^save/AssignVariableOp_12"
  input: "^save/AssignVariableOp_13"
  input: "^save/AssignVariableOp_14"
  input: "^save/AssignVariableOp_15"
  input: "^save/AssignVariableOp_16"
  input: "^save/AssignVariableOp_17"
  input: "^save/AssignVariableOp_18"
  input: "^save/AssignVariableOp_19"
  input: "^save/AssignVariableOp_2"
  input: "^save/AssignVariableOp_20"
  input: "^save/AssignVariableOp_3"
  input: "^save/AssignVariableOp_4"
  input: "^save/AssignVariableOp_5"
  input: "^save/AssignVariableOp_6"
  input: "^save/AssignVariableOp_7"
  input: "^save/AssignVariableOp_8"
  input: "^save/AssignVariableOp_9"
  experimental_debug_info {
  }
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/restore_shard"
  experimental_debug_info {
  }
}
library {
  function {
    signature {
      name: "decode_image_cond_jpeg_false_74"
      input_arg {
        name: "is_png_substr_reshape"
        type: DT_STRING
      }
      input_arg {
        name: "cond_png_decode_image_substr"
        type: DT_STRING
      }
      output_arg {
        name: "identity"
        type: DT_UINT8
      }
      is_stateful: true
      control_output: "cond_png"
    }
    node_def {
      name: "is_png/Substr/pos"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "is_png/Substr/pos"
      }
    }
    node_def {
      name: "is_png/Substr/len"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 3
          }
        }
      }
      experimental_debug_info {
        original_node_names: "is_png/Substr/len"
      }
    }
    node_def {
      name: "is_png/Substr"
      op: "Substr"
      input: "is_png_substr_reshape"
      input: "is_png/Substr/pos:output:0"
      input: "is_png/Substr/len:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "unit"
        value {
          s: "BYTE"
        }
      }
      experimental_debug_info {
        original_node_names: "is_png/Substr"
      }
    }
    node_def {
      name: "is_png/Equal/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "\211PN"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "is_png/Equal/y"
      }
    }
    node_def {
      name: "is_png/Equal"
      op: "Equal"
      input: "is_png/Substr:output:0"
      input: "is_png/Equal/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "is_png/Equal"
      }
    }
    node_def {
      name: "cond_png"
      op: "If"
      input: "is_png/Equal:z:0"
      input: "is_png_substr_reshape"
      input: "cond_png_decode_image_substr"
      attr {
        key: "Tcond"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Tin"
        value {
          list {
            type: DT_STRING
            type: DT_STRING
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_UINT8
          }
        }
      }
      attr {
        key: "_lower_using_switch_merge"
        value {
          b: true
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "_read_only_resource_inputs"
        value {
          list {
          }
        }
      }
      attr {
        key: "else_branch"
        value {
          func {
            name: "cond_png_false_93"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "then_branch"
        value {
          func {
            name: "cond_png_true_92"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "cond_png"
      }
    }
    node_def {
      name: "cond_png/Identity"
      op: "Identity"
      input: "cond_png:output:0"
      attr {
        key: "T"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "cond_png/Identity"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "cond_png/Identity:output:0"
      input: "^cond_png"
      attr {
        key: "T"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
          shape {
          }
        }
      }
    }
    control_ret {
      key: "cond_png"
      value: "cond_png"
    }
    arg_attr {
      key: 0
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_Dataset_map_parse_and_decode_287"
      input_arg {
        name: "args_0"
        type: DT_STRING
      }
      output_arg {
        name: "identity"
        type: DT_UINT8
      }
      output_arg {
        name: "identity_1"
        type: DT_INT64
      }
      is_stateful: true
      control_output: "decode_image/cond_jpeg"
    }
    node_def {
      name: "ParseSingleExample/ParseExample/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "ParseSingleExample/ParseExample/Const"
      }
    }
    node_def {
      name: "ParseSingleExample/ParseExample/Const_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "ParseSingleExample/ParseExample/Const_1"
      }
    }
    node_def {
      name: "ParseSingleExample/ParseExample/ParseExampleV2/names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "ParseSingleExample/ParseExample/ParseExampleV2/names"
      }
    }
    node_def {
      name: "ParseSingleExample/ParseExample/ParseExampleV2/sparse_keys"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "ParseSingleExample/ParseExample/ParseExampleV2/sparse_keys"
      }
    }
    node_def {
      name: "ParseSingleExample/ParseExample/ParseExampleV2/dense_keys"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "image"
            string_val: "label"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "ParseSingleExample/ParseExample/ParseExampleV2/dense_keys"
      }
    }
    node_def {
      name: "ParseSingleExample/ParseExample/ParseExampleV2/ragged_keys"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "ParseSingleExample/ParseExample/ParseExampleV2/ragged_keys"
      }
    }
    node_def {
      name: "ParseSingleExample/ParseExample/ParseExampleV2"
      op: "ParseExampleV2"
      input: "args_0"
      input: "ParseSingleExample/ParseExample/ParseExampleV2/names:output:0"
      input: "ParseSingleExample/ParseExample/ParseExampleV2/sparse_keys:output:0"
      input: "ParseSingleExample/ParseExample/ParseExampleV2/dense_keys:output:0"
      input: "ParseSingleExample/ParseExample/ParseExampleV2/ragged_keys:output:0"
      input: "ParseSingleExample/ParseExample/Const:output:0"
      input: "ParseSingleExample/ParseExample/Const_1:output:0"
      attr {
        key: "Tdense"
        value {
          list {
            type: DT_STRING
            type: DT_INT64
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
          }
        }
      }
      attr {
        key: "dense_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
          }
        }
      }
      attr {
        key: "num_sparse"
        value {
          i: 0
        }
      }
      attr {
        key: "ragged_split_types"
        value {
          list {
          }
        }
      }
      attr {
        key: "ragged_value_types"
        value {
          list {
          }
        }
      }
      attr {
        key: "sparse_types"
        value {
          list {
          }
        }
      }
      experimental_debug_info {
        original_node_names: "ParseSingleExample/ParseExample/ParseExampleV2"
      }
    }
    node_def {
      name: "Reshape/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape/shape"
      }
    }
    node_def {
      name: "Reshape"
      op: "Reshape"
      input: "ParseSingleExample/ParseExample/ParseExampleV2:dense_values:0"
      input: "Reshape/shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape"
      }
    }
    node_def {
      name: "Reshape_1/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_1/shape"
      }
    }
    node_def {
      name: "Reshape_1"
      op: "Reshape"
      input: "ParseSingleExample/ParseExample/ParseExampleV2:dense_values:1"
      input: "Reshape_1/shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_1"
      }
    }
    node_def {
      name: "decode_image/Substr/pos"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "decode_image/Substr/pos"
      }
    }
    node_def {
      name: "decode_image/Substr/len"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 3
          }
        }
      }
      experimental_debug_info {
        original_node_names: "decode_image/Substr/len"
      }
    }
    node_def {
      name: "decode_image/Substr"
      op: "Substr"
      input: "Reshape:output:0"
      input: "decode_image/Substr/pos:output:0"
      input: "decode_image/Substr/len:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "unit"
        value {
          s: "BYTE"
        }
      }
      experimental_debug_info {
        original_node_names: "decode_image/Substr"
      }
    }
    node_def {
      name: "decode_image/is_jpeg/Substr/pos"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "decode_image/is_jpeg/Substr/pos"
      }
    }
    node_def {
      name: "decode_image/is_jpeg/Substr/len"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 3
          }
        }
      }
      experimental_debug_info {
        original_node_names: "decode_image/is_jpeg/Substr/len"
      }
    }
    node_def {
      name: "decode_image/is_jpeg/Substr"
      op: "Substr"
      input: "Reshape:output:0"
      input: "decode_image/is_jpeg/Substr/pos:output:0"
      input: "decode_image/is_jpeg/Substr/len:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "unit"
        value {
          s: "BYTE"
        }
      }
      experimental_debug_info {
        original_node_names: "decode_image/is_jpeg/Substr"
      }
    }
    node_def {
      name: "decode_image/is_jpeg/Equal/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "\377\330\377"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "decode_image/is_jpeg/Equal/y"
      }
    }
    node_def {
      name: "decode_image/is_jpeg/Equal"
      op: "Equal"
      input: "decode_image/is_jpeg/Substr:output:0"
      input: "decode_image/is_jpeg/Equal/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "decode_image/is_jpeg/Equal"
      }
    }
    node_def {
      name: "decode_image/cond_jpeg"
      op: "If"
      input: "decode_image/is_jpeg/Equal:z:0"
      input: "Reshape:output:0"
      input: "decode_image/Substr:output:0"
      attr {
        key: "Tcond"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Tin"
        value {
          list {
            type: DT_STRING
            type: DT_STRING
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_UINT8
          }
        }
      }
      attr {
        key: "_lower_using_switch_merge"
        value {
          b: true
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "_read_only_resource_inputs"
        value {
          list {
          }
        }
      }
      attr {
        key: "else_branch"
        value {
          func {
            name: "decode_image_cond_jpeg_false_211"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "then_branch"
        value {
          func {
            name: "decode_image_cond_jpeg_true_210"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "decode_image/cond_jpeg"
      }
    }
    node_def {
      name: "decode_image/cond_jpeg/Identity"
      op: "Identity"
      input: "decode_image/cond_jpeg:output:0"
      attr {
        key: "T"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 28
              }
              dim {
                size: 28
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "decode_image/cond_jpeg/Identity"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "decode_image/cond_jpeg/Identity:output:0"
      input: "^decode_image/cond_jpeg"
      attr {
        key: "T"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 28
              }
              dim {
                size: 28
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "Reshape_1:output:0"
      input: "^decode_image/cond_jpeg"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
    control_ret {
      key: "decode_image/cond_jpeg"
      value: "decode_image/cond_jpeg"
    }
    arg_attr {
      key: 0
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "args_0"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "cond_png_false_93"
      input_arg {
        name: "cond_gif_reshape"
        type: DT_STRING
      }
      input_arg {
        name: "is_gif_decode_image_substr"
        type: DT_STRING
      }
      output_arg {
        name: "identity"
        type: DT_UINT8
      }
      is_stateful: true
      control_output: "cond_gif"
    }
    node_def {
      name: "is_gif/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "GIF"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "is_gif/y"
      }
    }
    node_def {
      name: "is_gif"
      op: "Equal"
      input: "is_gif_decode_image_substr"
      input: "is_gif/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "is_gif"
      }
    }
    node_def {
      name: "cond_gif"
      op: "If"
      input: "is_gif:z:0"
      input: "cond_gif_reshape"
      attr {
        key: "Tcond"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Tin"
        value {
          list {
            type: DT_STRING
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_UINT8
          }
        }
      }
      attr {
        key: "_lower_using_switch_merge"
        value {
          b: true
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "_read_only_resource_inputs"
        value {
          list {
          }
        }
      }
      attr {
        key: "else_branch"
        value {
          func {
            name: "cond_gif_false_104"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "then_branch"
        value {
          func {
            name: "cond_gif_true_103"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "cond_gif"
      }
    }
    node_def {
      name: "cond_gif/Identity"
      op: "Identity"
      input: "cond_gif:output:0"
      attr {
        key: "T"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "cond_gif/Identity"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "cond_gif/Identity:output:0"
      input: "^cond_gif"
      attr {
        key: "T"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
          shape {
          }
        }
      }
    }
    control_ret {
      key: "cond_gif"
      value: "cond_gif"
    }
    arg_attr {
      key: 0
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "cond_gif_false_241"
      input_arg {
        name: "substr_reshape"
        type: DT_STRING
      }
      output_arg {
        name: "identity_1"
        type: DT_UINT8
      }
      is_stateful: true
      control_output: "Assert/Assert"
      control_output: "Assert_1/Assert"
    }
    node_def {
      name: "Substr/pos"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Substr/pos"
      }
    }
    node_def {
      name: "Substr/len"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 2
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Substr/len"
      }
    }
    node_def {
      name: "Substr"
      op: "Substr"
      input: "substr_reshape"
      input: "Substr/pos:output:0"
      input: "Substr/len:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "unit"
        value {
          s: "BYTE"
        }
      }
      experimental_debug_info {
        original_node_names: "Substr"
      }
    }
    node_def {
      name: "is_bmp/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "BM"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "is_bmp/y"
      }
    }
    node_def {
      name: "is_bmp"
      op: "Equal"
      input: "Substr:output:0"
      input: "is_bmp/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "is_bmp"
      }
    }
    node_def {
      name: "Assert/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "Unable to decode bytes as JPEG, PNG, GIF, or BMP"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/Const"
      }
    }
    node_def {
      name: "Assert/Assert/data_0"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "Unable to decode bytes as JPEG, PNG, GIF, or BMP"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/Assert/data_0"
      }
    }
    node_def {
      name: "Assert/Assert"
      op: "Assert"
      input: "is_bmp:z:0"
      input: "Assert/Assert/data_0:output:0"
      attr {
        key: "T"
        value {
          list {
            type: DT_STRING
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
          }
        }
      }
      attr {
        key: "summarize"
        value {
          i: 3
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/Assert"
      }
    }
    node_def {
      name: "check_channels/x"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "check_channels/x"
      }
    }
    node_def {
      name: "check_channels/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "check_channels/y"
      }
    }
    node_def {
      name: "check_channels"
      op: "NotEqual"
      input: "check_channels/x:output:0"
      input: "check_channels/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "check_channels"
      }
    }
    node_def {
      name: "Assert_1/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "Channels must be in (None, 0, 3) when decoding BMP images"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert_1/Const"
      }
    }
    node_def {
      name: "Assert_1/Assert/data_0"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "Channels must be in (None, 0, 3) when decoding BMP images"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert_1/Assert/data_0"
      }
    }
    node_def {
      name: "Assert_1/Assert"
      op: "Assert"
      input: "check_channels:z:0"
      input: "Assert_1/Assert/data_0:output:0"
      input: "^Assert/Assert"
      attr {
        key: "T"
        value {
          list {
            type: DT_STRING
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
          }
        }
      }
      attr {
        key: "summarize"
        value {
          i: 3
        }
      }
      experimental_debug_info {
        original_node_names: "Assert_1/Assert"
      }
    }
    node_def {
      name: "DecodeBmp"
      op: "DecodeBmp"
      input: "substr_reshape"
      input: "^Assert/Assert"
      input: "^Assert_1/Assert"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "channels"
        value {
          i: 0
        }
      }
      experimental_debug_info {
        original_node_names: "DecodeBmp"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "DecodeBmp:image:0"
      attr {
        key: "T"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "Identity:output:0"
      input: "^Assert/Assert"
      input: "^Assert_1/Assert"
      attr {
        key: "T"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
    control_ret {
      key: "Assert/Assert"
      value: "Assert/Assert"
    }
    control_ret {
      key: "Assert_1/Assert"
      value: "Assert_1/Assert"
    }
    arg_attr {
      key: 0
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "global_step_cond_false_7"
      input_arg {
        name: "placeholder"
        type: DT_RESOURCE
      }
      input_arg {
        name: "global_step_initializer_zeros_0"
        type: DT_INT64
      }
      output_arg {
        name: "global_step_initializer_zeros"
        type: DT_INT64
      }
    }
    ret {
      key: "global_step_initializer_zeros"
      value: "global_step_initializer_zeros_0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            unknown_rank: true
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      key: 0
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "cond_gif_false_104"
      input_arg {
        name: "substr_reshape"
        type: DT_STRING
      }
      output_arg {
        name: "identity_1"
        type: DT_UINT8
      }
      is_stateful: true
      control_output: "Assert/Assert"
      control_output: "Assert_1/Assert"
    }
    node_def {
      name: "Substr/pos"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Substr/pos"
      }
    }
    node_def {
      name: "Substr/len"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 2
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Substr/len"
      }
    }
    node_def {
      name: "Substr"
      op: "Substr"
      input: "substr_reshape"
      input: "Substr/pos:output:0"
      input: "Substr/len:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "unit"
        value {
          s: "BYTE"
        }
      }
      experimental_debug_info {
        original_node_names: "Substr"
      }
    }
    node_def {
      name: "is_bmp/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "BM"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "is_bmp/y"
      }
    }
    node_def {
      name: "is_bmp"
      op: "Equal"
      input: "Substr:output:0"
      input: "is_bmp/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "is_bmp"
      }
    }
    node_def {
      name: "Assert/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "Unable to decode bytes as JPEG, PNG, GIF, or BMP"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/Const"
      }
    }
    node_def {
      name: "Assert/Assert/data_0"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "Unable to decode bytes as JPEG, PNG, GIF, or BMP"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/Assert/data_0"
      }
    }
    node_def {
      name: "Assert/Assert"
      op: "Assert"
      input: "is_bmp:z:0"
      input: "Assert/Assert/data_0:output:0"
      attr {
        key: "T"
        value {
          list {
            type: DT_STRING
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
          }
        }
      }
      attr {
        key: "summarize"
        value {
          i: 3
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/Assert"
      }
    }
    node_def {
      name: "check_channels/x"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "check_channels/x"
      }
    }
    node_def {
      name: "check_channels/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "check_channels/y"
      }
    }
    node_def {
      name: "check_channels"
      op: "NotEqual"
      input: "check_channels/x:output:0"
      input: "check_channels/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "check_channels"
      }
    }
    node_def {
      name: "Assert_1/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "Channels must be in (None, 0, 3) when decoding BMP images"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert_1/Const"
      }
    }
    node_def {
      name: "Assert_1/Assert/data_0"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "Channels must be in (None, 0, 3) when decoding BMP images"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert_1/Assert/data_0"
      }
    }
    node_def {
      name: "Assert_1/Assert"
      op: "Assert"
      input: "check_channels:z:0"
      input: "Assert_1/Assert/data_0:output:0"
      input: "^Assert/Assert"
      attr {
        key: "T"
        value {
          list {
            type: DT_STRING
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
          }
        }
      }
      attr {
        key: "summarize"
        value {
          i: 3
        }
      }
      experimental_debug_info {
        original_node_names: "Assert_1/Assert"
      }
    }
    node_def {
      name: "DecodeBmp"
      op: "DecodeBmp"
      input: "substr_reshape"
      input: "^Assert/Assert"
      input: "^Assert_1/Assert"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
      attr {
        key: "channels"
        value {
          i: 0
        }
      }
      experimental_debug_info {
        original_node_names: "DecodeBmp"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "DecodeBmp:image:0"
      attr {
        key: "T"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "Identity:output:0"
      input: "^Assert/Assert"
      input: "^Assert_1/Assert"
      attr {
        key: "T"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
    control_ret {
      key: "Assert/Assert"
      value: "Assert/Assert"
    }
    control_ret {
      key: "Assert_1/Assert"
      value: "Assert_1/Assert"
    }
    arg_attr {
      key: 0
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "cond_png_false_230"
      input_arg {
        name: "cond_gif_reshape"
        type: DT_STRING
      }
      input_arg {
        name: "is_gif_decode_image_substr"
        type: DT_STRING
      }
      output_arg {
        name: "identity"
        type: DT_UINT8
      }
      is_stateful: true
      control_output: "cond_gif"
    }
    node_def {
      name: "is_gif/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "GIF"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "is_gif/y"
      }
    }
    node_def {
      name: "is_gif"
      op: "Equal"
      input: "is_gif_decode_image_substr"
      input: "is_gif/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "is_gif"
      }
    }
    node_def {
      name: "cond_gif"
      op: "If"
      input: "is_gif:z:0"
      input: "cond_gif_reshape"
      attr {
        key: "Tcond"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Tin"
        value {
          list {
            type: DT_STRING
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_UINT8
          }
        }
      }
      attr {
        key: "_lower_using_switch_merge"
        value {
          b: true
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "_read_only_resource_inputs"
        value {
          list {
          }
        }
      }
      attr {
        key: "else_branch"
        value {
          func {
            name: "cond_gif_false_241"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "then_branch"
        value {
          func {
            name: "cond_gif_true_240"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "cond_gif"
      }
    }
    node_def {
      name: "cond_gif/Identity"
      op: "Identity"
      input: "cond_gif:output:0"
      attr {
        key: "T"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "cond_gif/Identity"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "cond_gif/Identity:output:0"
      input: "^cond_gif"
      attr {
        key: "T"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
          shape {
          }
        }
      }
    }
    control_ret {
      key: "cond_gif"
      value: "cond_gif"
    }
    arg_attr {
      key: 0
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_Dataset_flat_map_read_one_file_176"
      input_arg {
        name: "args_0"
        type: DT_STRING
      }
      output_arg {
        name: "identity"
        type: DT_VARIANT
      }
      is_stateful: true
      control_output: "TFRecordDataset"
    }
    node_def {
      name: "compression_type"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: ""
          }
        }
      }
      experimental_debug_info {
        original_node_names: "compression_type"
      }
    }
    node_def {
      name: "buffer_size"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 8388608
          }
        }
      }
      experimental_debug_info {
        original_node_names: "buffer_size"
      }
    }
    node_def {
      name: "TFRecordDataset"
      op: "TFRecordDataset"
      input: "args_0"
      input: "compression_type:output:0"
      input: "buffer_size:output:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "TFRecordDataset"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "TFRecordDataset:handle:0"
      input: "^TFRecordDataset"
      attr {
        key: "T"
        value {
          type: DT_VARIANT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
    control_ret {
      key: "TFRecordDataset"
      value: "TFRecordDataset"
    }
    arg_attr {
      key: 0
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "args_0"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_Dataset_flat_map_read_one_file_39"
      input_arg {
        name: "args_0"
        type: DT_STRING
      }
      output_arg {
        name: "identity"
        type: DT_VARIANT
      }
      is_stateful: true
      control_output: "TFRecordDataset"
    }
    node_def {
      name: "compression_type"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: ""
          }
        }
      }
      experimental_debug_info {
        original_node_names: "compression_type"
      }
    }
    node_def {
      name: "buffer_size"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
            }
            int64_val: 8388608
          }
        }
      }
      experimental_debug_info {
        original_node_names: "buffer_size"
      }
    }
    node_def {
      name: "TFRecordDataset"
      op: "TFRecordDataset"
      input: "args_0"
      input: "compression_type:output:0"
      input: "buffer_size:output:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "TFRecordDataset"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "TFRecordDataset:handle:0"
      input: "^TFRecordDataset"
      attr {
        key: "T"
        value {
          type: DT_VARIANT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
    control_ret {
      key: "TFRecordDataset"
      value: "TFRecordDataset"
    }
    arg_attr {
      key: 0
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "args_0"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "decode_image_cond_jpeg_false_211"
      input_arg {
        name: "is_png_substr_reshape"
        type: DT_STRING
      }
      input_arg {
        name: "cond_png_decode_image_substr"
        type: DT_STRING
      }
      output_arg {
        name: "identity"
        type: DT_UINT8
      }
      is_stateful: true
      control_output: "cond_png"
    }
    node_def {
      name: "is_png/Substr/pos"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "is_png/Substr/pos"
      }
    }
    node_def {
      name: "is_png/Substr/len"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 3
          }
        }
      }
      experimental_debug_info {
        original_node_names: "is_png/Substr/len"
      }
    }
    node_def {
      name: "is_png/Substr"
      op: "Substr"
      input: "is_png_substr_reshape"
      input: "is_png/Substr/pos:output:0"
      input: "is_png/Substr/len:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "unit"
        value {
          s: "BYTE"
        }
      }
      experimental_debug_info {
        original_node_names: "is_png/Substr"
      }
    }
    node_def {
      name: "is_png/Equal/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "\211PN"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "is_png/Equal/y"
      }
    }
    node_def {
      name: "is_png/Equal"
      op: "Equal"
      input: "is_png/Substr:output:0"
      input: "is_png/Equal/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "is_png/Equal"
      }
    }
    node_def {
      name: "cond_png"
      op: "If"
      input: "is_png/Equal:z:0"
      input: "is_png_substr_reshape"
      input: "cond_png_decode_image_substr"
      attr {
        key: "Tcond"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Tin"
        value {
          list {
            type: DT_STRING
            type: DT_STRING
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_UINT8
          }
        }
      }
      attr {
        key: "_lower_using_switch_merge"
        value {
          b: true
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "_read_only_resource_inputs"
        value {
          list {
          }
        }
      }
      attr {
        key: "else_branch"
        value {
          func {
            name: "cond_png_false_230"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "then_branch"
        value {
          func {
            name: "cond_png_true_229"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "cond_png"
      }
    }
    node_def {
      name: "cond_png/Identity"
      op: "Identity"
      input: "cond_png:output:0"
      attr {
        key: "T"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "cond_png/Identity"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "cond_png/Identity:output:0"
      input: "^cond_png"
      attr {
        key: "T"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
          shape {
          }
        }
      }
    }
    control_ret {
      key: "cond_png"
      value: "cond_png"
    }
    arg_attr {
      key: 0
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_Dataset_interleave_classfunctools.partial_42"
      input_arg {
        name: "args_0"
        type: DT_STRING
      }
      input_arg {
        name: "args_1"
        type: DT_STRING
      }
      input_arg {
        name: "args_2"
        type: DT_INT64
      }
      input_arg {
        name: "args_3"
        type: DT_INT64
      }
      output_arg {
        name: "identity"
        type: DT_VARIANT
      }
      is_stateful: true
      control_output: "TensorSliceDataset"
    }
    node_def {
      name: "flat_filenames/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "flat_filenames/shape"
      }
    }
    node_def {
      name: "flat_filenames"
      op: "Reshape"
      input: "args_0"
      input: "flat_filenames/shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "flat_filenames"
      }
    }
    node_def {
      name: "TensorSliceDataset"
      op: "TensorSliceDataset"
      input: "flat_filenames:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_STRING
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "TensorSliceDataset"
      }
    }
    node_def {
      name: "FlatMapDataset"
      op: "FlatMapDataset"
      input: "TensorSliceDataset:handle:0"
      attr {
        key: "Targuments"
        value {
          list {
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_Dataset_flat_map_read_one_file_39"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_STRING
          }
        }
      }
      experimental_debug_info {
        original_node_names: "FlatMapDataset"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "FlatMapDataset:handle:0"
      input: "^TensorSliceDataset"
      attr {
        key: "T"
        value {
          type: DT_VARIANT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
          shape {
          }
          shape {
          }
          shape {
          }
        }
      }
    }
    control_ret {
      key: "TensorSliceDataset"
      value: "TensorSliceDataset"
    }
    arg_attr {
      key: 0
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "args_0"
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "args_1"
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "args_2"
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "args_3"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "cond_png_true_92"
      input_arg {
        name: "decodepng_reshape"
        type: DT_STRING
      }
      input_arg {
        name: "placeholder"
        type: DT_STRING
      }
      output_arg {
        name: "identity_1"
        type: DT_UINT8
      }
    }
    node_def {
      name: "DecodePng"
      op: "DecodePng"
      input: "decodepng_reshape"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "channels"
        value {
          i: 1
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_UINT8
        }
      }
      experimental_debug_info {
        original_node_names: "DecodePng"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "DecodePng:image:0"
      attr {
        key: "T"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "Identity:output:0"
      attr {
        key: "T"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      key: 0
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_Dataset_map__parse_batch_samples_314"
      input_arg {
        name: "args_0"
        type: DT_UINT8
      }
      input_arg {
        name: "args_1"
        type: DT_INT64
      }
      output_arg {
        name: "identity"
        type: DT_HALF
      }
      output_arg {
        name: "identity_1"
        type: DT_INT32
      }
    }
    node_def {
      name: "convert_image/Cast"
      op: "Cast"
      input: "args_0"
      attr {
        key: "DstT"
        value {
          type: DT_HALF
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 28
              }
              dim {
                size: 28
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "convert_image/Cast"
      }
    }
    node_def {
      name: "convert_image/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_HALF
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_HALF
            tensor_shape {
            }
            half_val: 7172
          }
        }
      }
      experimental_debug_info {
        original_node_names: "convert_image/y"
      }
    }
    node_def {
      name: "convert_image"
      op: "Mul"
      input: "convert_image/Cast:y:0"
      input: "convert_image/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_HALF
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 28
              }
              dim {
                size: 28
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "convert_image"
      }
    }
    node_def {
      name: "Reshape/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 2
              }
            }
            tensor_content: "\000\001\000\000\377\377\377\377"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape/shape"
      }
    }
    node_def {
      name: "Reshape"
      op: "Reshape"
      input: "convert_image:z:0"
      input: "Reshape/shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_HALF
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 784
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape"
      }
    }
    node_def {
      name: "Cast"
      op: "Cast"
      input: "args_1"
      attr {
        key: "DstT"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "SrcT"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Truncate"
        value {
          b: false
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Cast"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "Reshape:output:0"
      attr {
        key: "T"
        value {
          type: DT_HALF
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
              dim {
                size: 784
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "Cast:y:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 256
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            dim {
              size: 256
            }
            dim {
              size: 28
            }
            dim {
              size: 28
            }
            dim {
              size: 1
            }
          }
          shape {
            dim {
              size: 256
            }
          }
        }
      }
    }
    arg_attr {
      key: 0
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 256
                }
                dim {
                  size: 28
                }
                dim {
                  size: 28
                }
                dim {
                  size: 1
                }
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "args_0"
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
                dim {
                  size: 256
                }
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "args_1"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "cond_png_true_229"
      input_arg {
        name: "decodepng_reshape"
        type: DT_STRING
      }
      input_arg {
        name: "placeholder"
        type: DT_STRING
      }
      output_arg {
        name: "identity_1"
        type: DT_UINT8
      }
    }
    node_def {
      name: "DecodePng"
      op: "DecodePng"
      input: "decodepng_reshape"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "channels"
        value {
          i: 1
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_UINT8
        }
      }
      experimental_debug_info {
        original_node_names: "DecodePng"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "DecodePng:image:0"
      attr {
        key: "T"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "Identity:output:0"
      attr {
        key: "T"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      key: 0
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "cond_gif_true_103"
      input_arg {
        name: "decodegif_reshape"
        type: DT_STRING
      }
      output_arg {
        name: "identity_1"
        type: DT_UINT8
      }
      is_stateful: true
      control_output: "Assert/Assert"
    }
    node_def {
      name: "check_gif_channels/x"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "check_gif_channels/x"
      }
    }
    node_def {
      name: "check_gif_channels/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "check_gif_channels/y"
      }
    }
    node_def {
      name: "check_gif_channels"
      op: "NotEqual"
      input: "check_gif_channels/x:output:0"
      input: "check_gif_channels/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "check_gif_channels"
      }
    }
    node_def {
      name: "check_gif_channels_1/x"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "check_gif_channels_1/x"
      }
    }
    node_def {
      name: "check_gif_channels_1/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
      experimental_debug_info {
        original_node_names: "check_gif_channels_1/y"
      }
    }
    node_def {
      name: "check_gif_channels_1"
      op: "NotEqual"
      input: "check_gif_channels_1/x:output:0"
      input: "check_gif_channels_1/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "check_gif_channels_1"
      }
    }
    node_def {
      name: "LogicalAnd"
      op: "LogicalAnd"
      input: "check_gif_channels:z:0"
      input: "check_gif_channels_1:z:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "LogicalAnd"
      }
    }
    node_def {
      name: "Assert/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "Channels must be in (None, 0, 3) when decoding GIF images"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/Const"
      }
    }
    node_def {
      name: "Assert/Assert/data_0"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "Channels must be in (None, 0, 3) when decoding GIF images"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/Assert/data_0"
      }
    }
    node_def {
      name: "Assert/Assert"
      op: "Assert"
      input: "LogicalAnd:z:0"
      input: "Assert/Assert/data_0:output:0"
      attr {
        key: "T"
        value {
          list {
            type: DT_STRING
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
          }
        }
      }
      attr {
        key: "summarize"
        value {
          i: 3
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/Assert"
      }
    }
    node_def {
      name: "DecodeGif"
      op: "DecodeGif"
      input: "decodegif_reshape"
      input: "^Assert/Assert"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "DecodeGif"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "DecodeGif:image:0"
      attr {
        key: "T"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "Identity:output:0"
      input: "^Assert/Assert"
      attr {
        key: "T"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
    control_ret {
      key: "Assert/Assert"
      value: "Assert/Assert"
    }
    arg_attr {
      key: 0
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "decode_image_cond_jpeg_true_73"
      input_arg {
        name: "decodejpeg_reshape"
        type: DT_STRING
      }
      input_arg {
        name: "placeholder"
        type: DT_STRING
      }
      output_arg {
        name: "identity_1"
        type: DT_UINT8
      }
      is_stateful: true
      control_output: "Assert/Assert"
    }
    node_def {
      name: "check_jpeg_channels/x"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "check_jpeg_channels/x"
      }
    }
    node_def {
      name: "check_jpeg_channels/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
      experimental_debug_info {
        original_node_names: "check_jpeg_channels/y"
      }
    }
    node_def {
      name: "check_jpeg_channels"
      op: "NotEqual"
      input: "check_jpeg_channels/x:output:0"
      input: "check_jpeg_channels/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "check_jpeg_channels"
      }
    }
    node_def {
      name: "Assert/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "Channels must be in (None, 0, 1, 3) when decoding JPEG images"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/Const"
      }
    }
    node_def {
      name: "Assert/Assert/data_0"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "Channels must be in (None, 0, 1, 3) when decoding JPEG images"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/Assert/data_0"
      }
    }
    node_def {
      name: "Assert/Assert"
      op: "Assert"
      input: "check_jpeg_channels:z:0"
      input: "Assert/Assert/data_0:output:0"
      attr {
        key: "T"
        value {
          list {
            type: DT_STRING
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
          }
        }
      }
      attr {
        key: "summarize"
        value {
          i: 3
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/Assert"
      }
    }
    node_def {
      name: "DecodeJpeg"
      op: "DecodeJpeg"
      input: "decodejpeg_reshape"
      input: "^Assert/Assert"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "acceptable_fraction"
        value {
          f: 1.0
        }
      }
      attr {
        key: "channels"
        value {
          i: 1
        }
      }
      attr {
        key: "dct_method"
        value {
          s: ""
        }
      }
      attr {
        key: "fancy_upscaling"
        value {
          b: true
        }
      }
      attr {
        key: "ratio"
        value {
          i: 1
        }
      }
      attr {
        key: "try_recover_truncated"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "DecodeJpeg"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "DecodeJpeg:image:0"
      attr {
        key: "T"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "Identity:output:0"
      input: "^Assert/Assert"
      attr {
        key: "T"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
          shape {
          }
        }
      }
    }
    control_ret {
      key: "Assert/Assert"
      value: "Assert/Assert"
    }
    arg_attr {
      key: 0
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "global_step_cond_true_6"
      input_arg {
        name: "read_readvariableop_global_step"
        type: DT_RESOURCE
      }
      input_arg {
        name: "placeholder"
        type: DT_INT64
      }
      output_arg {
        name: "identity"
        type: DT_INT64
      }
      is_stateful: true
    }
    node_def {
      name: "Read/ReadVariableOp"
      op: "ReadVariableOp"
      input: "read_readvariableop_global_step"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      experimental_debug_info {
        original_node_names: "Read/ReadVariableOp"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "Read/ReadVariableOp:value:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
            unknown_rank: true
          }
          shape {
          }
        }
      }
    }
    arg_attr {
      key: 0
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_Dataset_interleave_classfunctools.partial_179"
      input_arg {
        name: "args_0"
        type: DT_STRING
      }
      input_arg {
        name: "args_1"
        type: DT_STRING
      }
      input_arg {
        name: "args_2"
        type: DT_INT64
      }
      input_arg {
        name: "args_3"
        type: DT_INT64
      }
      output_arg {
        name: "identity"
        type: DT_VARIANT
      }
      is_stateful: true
      control_output: "TensorSliceDataset"
    }
    node_def {
      name: "flat_filenames/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
                size: 1
              }
            }
            int_val: -1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "flat_filenames/shape"
      }
    }
    node_def {
      name: "flat_filenames"
      op: "Reshape"
      input: "args_0"
      input: "flat_filenames/shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "flat_filenames"
      }
    }
    node_def {
      name: "TensorSliceDataset"
      op: "TensorSliceDataset"
      input: "flat_filenames:output:0"
      attr {
        key: "Toutput_types"
        value {
          list {
            type: DT_STRING
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "TensorSliceDataset"
      }
    }
    node_def {
      name: "FlatMapDataset"
      op: "FlatMapDataset"
      input: "TensorSliceDataset:handle:0"
      attr {
        key: "Targuments"
        value {
          list {
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "f"
        value {
          func {
            name: "__inference_Dataset_flat_map_read_one_file_176"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "output_types"
        value {
          list {
            type: DT_STRING
          }
        }
      }
      experimental_debug_info {
        original_node_names: "FlatMapDataset"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "FlatMapDataset:handle:0"
      input: "^TensorSliceDataset"
      attr {
        key: "T"
        value {
          type: DT_VARIANT
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
          shape {
          }
          shape {
          }
          shape {
          }
        }
      }
    }
    control_ret {
      key: "TensorSliceDataset"
      value: "TensorSliceDataset"
    }
    arg_attr {
      key: 0
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "args_0"
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "args_1"
          }
        }
      }
    }
    arg_attr {
      key: 2
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "args_2"
          }
        }
      }
    }
    arg_attr {
      key: 3
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "args_3"
          }
        }
      }
    }
  }
  function {
    signature {
      name: "decode_image_cond_jpeg_true_210"
      input_arg {
        name: "decodejpeg_reshape"
        type: DT_STRING
      }
      input_arg {
        name: "placeholder"
        type: DT_STRING
      }
      output_arg {
        name: "identity_1"
        type: DT_UINT8
      }
      is_stateful: true
      control_output: "Assert/Assert"
    }
    node_def {
      name: "check_jpeg_channels/x"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "check_jpeg_channels/x"
      }
    }
    node_def {
      name: "check_jpeg_channels/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
      experimental_debug_info {
        original_node_names: "check_jpeg_channels/y"
      }
    }
    node_def {
      name: "check_jpeg_channels"
      op: "NotEqual"
      input: "check_jpeg_channels/x:output:0"
      input: "check_jpeg_channels/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "check_jpeg_channels"
      }
    }
    node_def {
      name: "Assert/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "Channels must be in (None, 0, 1, 3) when decoding JPEG images"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/Const"
      }
    }
    node_def {
      name: "Assert/Assert/data_0"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "Channels must be in (None, 0, 1, 3) when decoding JPEG images"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/Assert/data_0"
      }
    }
    node_def {
      name: "Assert/Assert"
      op: "Assert"
      input: "check_jpeg_channels:z:0"
      input: "Assert/Assert/data_0:output:0"
      attr {
        key: "T"
        value {
          list {
            type: DT_STRING
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
          }
        }
      }
      attr {
        key: "summarize"
        value {
          i: 3
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/Assert"
      }
    }
    node_def {
      name: "DecodeJpeg"
      op: "DecodeJpeg"
      input: "decodejpeg_reshape"
      input: "^Assert/Assert"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      attr {
        key: "acceptable_fraction"
        value {
          f: 1.0
        }
      }
      attr {
        key: "channels"
        value {
          i: 1
        }
      }
      attr {
        key: "dct_method"
        value {
          s: ""
        }
      }
      attr {
        key: "fancy_upscaling"
        value {
          b: true
        }
      }
      attr {
        key: "ratio"
        value {
          i: 1
        }
      }
      attr {
        key: "try_recover_truncated"
        value {
          b: false
        }
      }
      experimental_debug_info {
        original_node_names: "DecodeJpeg"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "DecodeJpeg:image:0"
      attr {
        key: "T"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "Identity:output:0"
      input: "^Assert/Assert"
      attr {
        key: "T"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
          shape {
          }
        }
      }
    }
    control_ret {
      key: "Assert/Assert"
      value: "Assert/Assert"
    }
    arg_attr {
      key: 0
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
    arg_attr {
      key: 1
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "cond_gif_true_240"
      input_arg {
        name: "decodegif_reshape"
        type: DT_STRING
      }
      output_arg {
        name: "identity_1"
        type: DT_UINT8
      }
      is_stateful: true
      control_output: "Assert/Assert"
    }
    node_def {
      name: "check_gif_channels/x"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "check_gif_channels/x"
      }
    }
    node_def {
      name: "check_gif_channels/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "check_gif_channels/y"
      }
    }
    node_def {
      name: "check_gif_channels"
      op: "NotEqual"
      input: "check_gif_channels/x:output:0"
      input: "check_gif_channels/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "check_gif_channels"
      }
    }
    node_def {
      name: "check_gif_channels_1/x"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 1
          }
        }
      }
      experimental_debug_info {
        original_node_names: "check_gif_channels_1/x"
      }
    }
    node_def {
      name: "check_gif_channels_1/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 4
          }
        }
      }
      experimental_debug_info {
        original_node_names: "check_gif_channels_1/y"
      }
    }
    node_def {
      name: "check_gif_channels_1"
      op: "NotEqual"
      input: "check_gif_channels_1/x:output:0"
      input: "check_gif_channels_1/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "check_gif_channels_1"
      }
    }
    node_def {
      name: "LogicalAnd"
      op: "LogicalAnd"
      input: "check_gif_channels:z:0"
      input: "check_gif_channels_1:z:0"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "LogicalAnd"
      }
    }
    node_def {
      name: "Assert/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "Channels must be in (None, 0, 3) when decoding GIF images"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/Const"
      }
    }
    node_def {
      name: "Assert/Assert/data_0"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "Channels must be in (None, 0, 3) when decoding GIF images"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/Assert/data_0"
      }
    }
    node_def {
      name: "Assert/Assert"
      op: "Assert"
      input: "LogicalAnd:z:0"
      input: "Assert/Assert/data_0:output:0"
      attr {
        key: "T"
        value {
          list {
            type: DT_STRING
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
          }
        }
      }
      attr {
        key: "summarize"
        value {
          i: 3
        }
      }
      experimental_debug_info {
        original_node_names: "Assert/Assert"
      }
    }
    node_def {
      name: "DecodeGif"
      op: "DecodeGif"
      input: "decodegif_reshape"
      input: "^Assert/Assert"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "DecodeGif"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "DecodeGif:image:0"
      attr {
        key: "T"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "Identity:output:0"
      input: "^Assert/Assert"
      attr {
        key: "T"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: -1
              }
              dim {
                size: 3
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
    control_ret {
      key: "Assert/Assert"
      value: "Assert/Assert"
    }
    arg_attr {
      key: 0
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
      }
    }
  }
  function {
    signature {
      name: "__inference_Dataset_map_parse_and_decode_150"
      input_arg {
        name: "args_0"
        type: DT_STRING
      }
      output_arg {
        name: "identity"
        type: DT_UINT8
      }
      output_arg {
        name: "identity_1"
        type: DT_INT64
      }
      is_stateful: true
      control_output: "decode_image/cond_jpeg"
    }
    node_def {
      name: "ParseSingleExample/ParseExample/Const"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "ParseSingleExample/ParseExample/Const"
      }
    }
    node_def {
      name: "ParseSingleExample/ParseExample/Const_1"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT64
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "ParseSingleExample/ParseExample/Const_1"
      }
    }
    node_def {
      name: "ParseSingleExample/ParseExample/ParseExampleV2/names"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "ParseSingleExample/ParseExample/ParseExampleV2/names"
      }
    }
    node_def {
      name: "ParseSingleExample/ParseExample/ParseExampleV2/sparse_keys"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "ParseSingleExample/ParseExample/ParseExampleV2/sparse_keys"
      }
    }
    node_def {
      name: "ParseSingleExample/ParseExample/ParseExampleV2/dense_keys"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 2
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
                size: 2
              }
            }
            string_val: "image"
            string_val: "label"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "ParseSingleExample/ParseExample/ParseExampleV2/dense_keys"
      }
    }
    node_def {
      name: "ParseSingleExample/ParseExample/ParseExampleV2/ragged_keys"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "ParseSingleExample/ParseExample/ParseExampleV2/ragged_keys"
      }
    }
    node_def {
      name: "ParseSingleExample/ParseExample/ParseExampleV2"
      op: "ParseExampleV2"
      input: "args_0"
      input: "ParseSingleExample/ParseExample/ParseExampleV2/names:output:0"
      input: "ParseSingleExample/ParseExample/ParseExampleV2/sparse_keys:output:0"
      input: "ParseSingleExample/ParseExample/ParseExampleV2/dense_keys:output:0"
      input: "ParseSingleExample/ParseExample/ParseExampleV2/ragged_keys:output:0"
      input: "ParseSingleExample/ParseExample/Const:output:0"
      input: "ParseSingleExample/ParseExample/Const_1:output:0"
      attr {
        key: "Tdense"
        value {
          list {
            type: DT_STRING
            type: DT_INT64
          }
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
          }
        }
      }
      attr {
        key: "dense_shapes"
        value {
          list {
            shape {
            }
            shape {
            }
          }
        }
      }
      attr {
        key: "num_sparse"
        value {
          i: 0
        }
      }
      attr {
        key: "ragged_split_types"
        value {
          list {
          }
        }
      }
      attr {
        key: "ragged_value_types"
        value {
          list {
          }
        }
      }
      attr {
        key: "sparse_types"
        value {
          list {
          }
        }
      }
      experimental_debug_info {
        original_node_names: "ParseSingleExample/ParseExample/ParseExampleV2"
      }
    }
    node_def {
      name: "Reshape/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape/shape"
      }
    }
    node_def {
      name: "Reshape"
      op: "Reshape"
      input: "ParseSingleExample/ParseExample/ParseExampleV2:dense_values:0"
      input: "Reshape/shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape"
      }
    }
    node_def {
      name: "Reshape_1/shape"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
              }
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
              dim {
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_1/shape"
      }
    }
    node_def {
      name: "Reshape_1"
      op: "Reshape"
      input: "ParseSingleExample/ParseExample/ParseExampleV2:dense_values:1"
      input: "Reshape_1/shape:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "Tshape"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Reshape_1"
      }
    }
    node_def {
      name: "decode_image/Substr/pos"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "decode_image/Substr/pos"
      }
    }
    node_def {
      name: "decode_image/Substr/len"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 3
          }
        }
      }
      experimental_debug_info {
        original_node_names: "decode_image/Substr/len"
      }
    }
    node_def {
      name: "decode_image/Substr"
      op: "Substr"
      input: "Reshape:output:0"
      input: "decode_image/Substr/pos:output:0"
      input: "decode_image/Substr/len:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "unit"
        value {
          s: "BYTE"
        }
      }
      experimental_debug_info {
        original_node_names: "decode_image/Substr"
      }
    }
    node_def {
      name: "decode_image/is_jpeg/Substr/pos"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 0
          }
        }
      }
      experimental_debug_info {
        original_node_names: "decode_image/is_jpeg/Substr/pos"
      }
    }
    node_def {
      name: "decode_image/is_jpeg/Substr/len"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_INT32
            tensor_shape {
            }
            int_val: 3
          }
        }
      }
      experimental_debug_info {
        original_node_names: "decode_image/is_jpeg/Substr/len"
      }
    }
    node_def {
      name: "decode_image/is_jpeg/Substr"
      op: "Substr"
      input: "Reshape:output:0"
      input: "decode_image/is_jpeg/Substr/pos:output:0"
      input: "decode_image/is_jpeg/Substr/len:output:0"
      attr {
        key: "T"
        value {
          type: DT_INT32
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "unit"
        value {
          s: "BYTE"
        }
      }
      experimental_debug_info {
        original_node_names: "decode_image/is_jpeg/Substr"
      }
    }
    node_def {
      name: "decode_image/is_jpeg/Equal/y"
      op: "Const"
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "dtype"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "value"
        value {
          tensor {
            dtype: DT_STRING
            tensor_shape {
            }
            string_val: "\377\330\377"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "decode_image/is_jpeg/Equal/y"
      }
    }
    node_def {
      name: "decode_image/is_jpeg/Equal"
      op: "Equal"
      input: "decode_image/is_jpeg/Substr:output:0"
      input: "decode_image/is_jpeg/Equal/y:output:0"
      attr {
        key: "T"
        value {
          type: DT_STRING
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      attr {
        key: "incompatible_shape_error"
        value {
          b: true
        }
      }
      experimental_debug_info {
        original_node_names: "decode_image/is_jpeg/Equal"
      }
    }
    node_def {
      name: "decode_image/cond_jpeg"
      op: "If"
      input: "decode_image/is_jpeg/Equal:z:0"
      input: "Reshape:output:0"
      input: "decode_image/Substr:output:0"
      attr {
        key: "Tcond"
        value {
          type: DT_BOOL
        }
      }
      attr {
        key: "Tin"
        value {
          list {
            type: DT_STRING
            type: DT_STRING
          }
        }
      }
      attr {
        key: "Tout"
        value {
          list {
            type: DT_UINT8
          }
        }
      }
      attr {
        key: "_lower_using_switch_merge"
        value {
          b: true
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "_read_only_resource_inputs"
        value {
          list {
          }
        }
      }
      attr {
        key: "else_branch"
        value {
          func {
            name: "decode_image_cond_jpeg_false_74"
          }
        }
      }
      attr {
        key: "output_shapes"
        value {
          list {
            shape {
              unknown_rank: true
            }
          }
        }
      }
      attr {
        key: "then_branch"
        value {
          func {
            name: "decode_image_cond_jpeg_true_73"
          }
        }
      }
      experimental_debug_info {
        original_node_names: "decode_image/cond_jpeg"
      }
    }
    node_def {
      name: "decode_image/cond_jpeg/Identity"
      op: "Identity"
      input: "decode_image/cond_jpeg:output:0"
      attr {
        key: "T"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 28
              }
              dim {
                size: 28
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "decode_image/cond_jpeg/Identity"
      }
    }
    node_def {
      name: "Identity"
      op: "Identity"
      input: "decode_image/cond_jpeg/Identity:output:0"
      input: "^decode_image/cond_jpeg"
      attr {
        key: "T"
        value {
          type: DT_UINT8
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
              dim {
                size: 28
              }
              dim {
                size: 28
              }
              dim {
                size: 1
              }
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity"
      }
    }
    node_def {
      name: "Identity_1"
      op: "Identity"
      input: "Reshape_1:output:0"
      input: "^decode_image/cond_jpeg"
      attr {
        key: "T"
        value {
          type: DT_INT64
        }
      }
      attr {
        key: "_output_shapes"
        value {
          list {
            shape {
            }
          }
        }
      }
      experimental_debug_info {
        original_node_names: "Identity_1"
      }
    }
    ret {
      key: "identity"
      value: "Identity:output:0"
    }
    ret {
      key: "identity_1"
      value: "Identity_1:output:0"
    }
    attr {
      key: "_input_shapes"
      value {
        list {
          shape {
          }
        }
      }
    }
    control_ret {
      key: "decode_image/cond_jpeg"
      value: "decode_image/cond_jpeg"
    }
    arg_attr {
      key: 0
      value {
        attr {
          key: "_output_shapes"
          value {
            list {
              shape {
              }
            }
          }
        }
        attr {
          key: "_user_specified_name"
          value {
            s: "args_0"
          }
        }
      }
    }
  }
}
versions {
  producer: 175
  min_consumer: 12
}
